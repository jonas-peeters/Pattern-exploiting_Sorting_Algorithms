#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#include "const.h"

#include <emmintrin.h> //SSE2
#include <immintrin.h> //AVX, AVX2, AVX-512
#include <nmmintrin.h> //SSE4.2
#include <pmmintrin.h> //SSE3
#include <smmintrin.h> //SSE4.1
#include <xmmintrin.h> //for SSE

void swap(int *a, int *b);
int median_of_three_of_median_of_three(int array[], int low, int high);
void insertionSortOptimized(int array[], int n);
int x[2];

int partition_quick_optimized_swap_arith(int array[], int low, int high) {
  int pivot = median_of_three_of_median_of_three(array, low, high);

  //int i = low;
  //for (int j = low; j < high; j++) {
  //  int c = pivot > array[j];
  //  int x = array[i];
  //  int y = array[j];
  //  int d = x * c + y * (1 - c);
  //  int f = x * (1 - c) + y * c;
  //  array[j] = d;
  //  array[i] = f;
  //  i += c;
  //}
  //swap(&array[i], &array[high]);
  int64_t i = low;
  int64_t h = high;
  asm volatile("    movq    %[i], %%r12\n"
               "1:\n"
               "\n" // Loop start
               "    movl     (%[array],%%r12,4), %%r8d\n"
               "    xorq     %%r10, %%r10\n"
               "    cmp      %[pivot], %%r8d\n"
               "    setl     %%r10b\n"
               "    movl     (%[array],%[i],4), %%r9d\n"
               "    movl     %%r8d, %%r11d\n"
               "    movl     %%r9d, %%r13d\n"
               "    imull    %%r10d, %%r11d\n"
               "    imull    %%r10d, %%r13d\n"
               "    xorl     $1, %%r10d\n"
               "    imull    %%r10d, %%r8d\n"
               "    imull    %%r10d, %%r9d\n"
               "    add      %%r11d, %%r9d\n"
               "    add      %%r13d, %%r8d\n"
               "    movl     %%r8d, (%[array],%%r12,4)\n"
               "    movl     %%r9d, (%[array],%[i],4)\n"
               "    xorl     $1, %%r10d\n"
               "    addq     %%r10, %[i]\n"

               //"    movl     %%r8d, %%r11d\n"
               //"    cmovll   %%r9d, %%r11d\n"
               //"    movl     %%r11d, (%[array],%%r12,4)\n"
               //"    cmovll   %%r8d, %%r9d\n"
               //"    movl     %%r9d, (%[array],%[i],4)\n"
               //"    addq     %%r10, %[i]\n"
               "\n" // Loop end
               "    incq     %%r12\n"
               "    cmp      %%r12, %[high]\n"
               "    jne      1b\n"
               "\n" // Swap pivot back
               "    movl     (%[array],%[i],4), %%r9d\n"
               "    movl     (%[array],%[high],4), %%r8d\n"
               "    movl     %%r9d, (%[array],%[high],4)\n"
               "    movl     %%r8d, (%[array],%[i],4)\n"
               : [i] "+r"(i)
               : [array] "r"(array), [pivot] "r"(pivot), [high] "r"(h)
               : "cc", "r8", "r9", "r10", "r11", "r12", "r13");
  return (low);
}

void sort_quick_optimized_swap_arith(int array[], int low, int high) {
  if (low < high) {
    if (high - low > INSERTION_SORT_THRESH) {
      int pi = partition_quick_optimized_swap_arith(array, low, high);
      sort_quick_optimized_swap_arith(array, low, pi - 1);
      sort_quick_optimized_swap_arith(array, pi + 1, high);
    } else {
      insertionSortOptimized(array + low, high - low + 1);
    }
  }
}
