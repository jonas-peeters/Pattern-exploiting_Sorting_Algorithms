void sort_pair(int *i1, int *i2);

void insertionSort(int array[], int n) {
  int i, element, j;
  for (i = 1; i < n; i++) {
    element = array[i];
    j = i - 1;

    while (j >= 0 && array[j] > element) {
      array[j + 1] = array[j];
      j--;
    }
    array[j + 1] = element;
  }
}

void insertionSortOptimized(int array[], int n) {
  int i, element, j;
  for (i = 1; i < n; i++) {
    element = array[i];
    j = i - 1;

    while (j >= 0 && array[j] > element) {
      array[j + 1] = array[j];
      j--;
    }
    array[j + 1] = element;
  }
}

void insertionSortStd(int array[], int low, int high) {
  int i, j;
  int element;
  for (i = low + 1; i <= high; i++) {
    element = array[i];
    j = i - 1;

    while (j >= 0 && array[j] > element) {
      array[j + 1] = array[j];
      j--;
    }
    array[j + 1] = element;
  }
}

void insertionSortStdOpt(int array[], int low, int high) {
  //if (high - low >= 9) {
    insertionSortStd(array, low, high);
  //} else if (high - low >= 8) {
  //  sort_pair(&array[low], &array[low + 1]);
  //  sort_pair(&array[low + 1], &array[low + 2]);
  //  sort_pair(&array[low + 2], &array[low + 3]);
  //  sort_pair(&array[low + 3], &array[low + 4]);
  //  sort_pair(&array[low + 4], &array[low + 5]);
  //  sort_pair(&array[low + 5], &array[low + 6]);
  //  sort_pair(&array[low + 6], &array[low + 7]);
  //  sort_pair(&array[low + 7], &array[low + 8]);
  //  sort_pair(&array[low], &array[low + 1]);
  //  sort_pair(&array[low + 1], &array[low + 2]);
  //  sort_pair(&array[low + 2], &array[low + 3]);
  //  sort_pair(&array[low + 3], &array[low + 4]);
  //  sort_pair(&array[low + 4], &array[low + 5]);
  //  sort_pair(&array[low + 5], &array[low + 6]);
  //  sort_pair(&array[low + 6], &array[low + 7]);
  //  sort_pair(&array[low], &array[low + 1]);
  //  sort_pair(&array[low + 1], &array[low + 2]);
  //  sort_pair(&array[low + 2], &array[low + 3]);
  //  sort_pair(&array[low + 3], &array[low + 4]);
  //  sort_pair(&array[low + 4], &array[low + 5]);
  //  sort_pair(&array[low + 5], &array[low + 6]);
  //  sort_pair(&array[low], &array[low + 1]);
  //  sort_pair(&array[low + 1], &array[low + 2]);
  //  sort_pair(&array[low + 2], &array[low + 3]);
  //  sort_pair(&array[low + 3], &array[low + 4]);
  //  sort_pair(&array[low + 4], &array[low + 5]);
  //  sort_pair(&array[low], &array[low + 1]);
  //  sort_pair(&array[low + 1], &array[low + 2]);
  //  sort_pair(&array[low + 2], &array[low + 3]);
  //  sort_pair(&array[low + 3], &array[low + 4]);
  //  sort_pair(&array[low], &array[low + 1]);
  //  sort_pair(&array[low + 1], &array[low + 2]);
  //  sort_pair(&array[low + 2], &array[low + 3]);
  //  sort_pair(&array[low], &array[low + 1]);
  //  sort_pair(&array[low + 1], &array[low + 2]);
  //  sort_pair(&array[low], &array[low + 1]);
  //} else if (high - low >= 7) {
  //  sort_pair(&array[low], &array[low + 1]);
  //  sort_pair(&array[low + 1], &array[low + 2]);
  //  sort_pair(&array[low + 2], &array[low + 3]);
  //  sort_pair(&array[low + 3], &array[low + 4]);
  //  sort_pair(&array[low + 4], &array[low + 5]);
  //  sort_pair(&array[low + 5], &array[low + 6]);
  //  sort_pair(&array[low + 6], &array[low + 7]);
  //  sort_pair(&array[low], &array[low + 1]);
  //  sort_pair(&array[low + 1], &array[low + 2]);
  //  sort_pair(&array[low + 2], &array[low + 3]);
  //  sort_pair(&array[low + 3], &array[low + 4]);
  //  sort_pair(&array[low + 4], &array[low + 5]);
  //  sort_pair(&array[low + 5], &array[low + 6]);
  //  sort_pair(&array[low], &array[low + 1]);
  //  sort_pair(&array[low + 1], &array[low + 2]);
  //  sort_pair(&array[low + 2], &array[low + 3]);
  //  sort_pair(&array[low + 3], &array[low + 4]);
  //  sort_pair(&array[low + 4], &array[low + 5]);
  //  sort_pair(&array[low], &array[low + 1]);
  //  sort_pair(&array[low + 1], &array[low + 2]);
  //  sort_pair(&array[low + 2], &array[low + 3]);
  //  sort_pair(&array[low + 3], &array[low + 4]);
  //  sort_pair(&array[low], &array[low + 1]);
  //  sort_pair(&array[low + 1], &array[low + 2]);
  //  sort_pair(&array[low + 2], &array[low + 3]);
  //  sort_pair(&array[low], &array[low + 1]);
  //  sort_pair(&array[low + 1], &array[low + 2]);
  //  sort_pair(&array[low], &array[low + 1]);
  //} else if (high - low >= 6) {
  //  sort_pair(&array[low], &array[low + 1]);
  //  sort_pair(&array[low + 1], &array[low + 2]);
  //  sort_pair(&array[low + 2], &array[low + 3]);
  //  sort_pair(&array[low + 3], &array[low + 4]);
  //  sort_pair(&array[low + 4], &array[low + 5]);
  //  sort_pair(&array[low + 5], &array[low + 6]);
  //  sort_pair(&array[low], &array[low + 1]);
  //  sort_pair(&array[low + 1], &array[low + 2]);
  //  sort_pair(&array[low + 2], &array[low + 3]);
  //  sort_pair(&array[low + 3], &array[low + 4]);
  //  sort_pair(&array[low + 4], &array[low + 5]);
  //  sort_pair(&array[low], &array[low + 1]);
  //  sort_pair(&array[low + 1], &array[low + 2]);
  //  sort_pair(&array[low + 2], &array[low + 3]);
  //  sort_pair(&array[low + 3], &array[low + 4]);
  //  sort_pair(&array[low], &array[low + 1]);
  //  sort_pair(&array[low + 1], &array[low + 2]);
  //  sort_pair(&array[low + 2], &array[low + 3]);
  //  sort_pair(&array[low], &array[low + 1]);
  //  sort_pair(&array[low + 1], &array[low + 2]);
  //  sort_pair(&array[low], &array[low + 1]);
  //} else if (high - low >= 5) {
  //  sort_pair(&array[low], &array[low + 1]);
  //  sort_pair(&array[low + 1], &array[low + 2]);
  //  sort_pair(&array[low + 2], &array[low + 3]);
  //  sort_pair(&array[low + 3], &array[low + 4]);
  //  sort_pair(&array[low + 4], &array[low + 5]);
  //  sort_pair(&array[low], &array[low + 1]);
  //  sort_pair(&array[low + 1], &array[low + 2]);
  //  sort_pair(&array[low + 2], &array[low + 3]);
  //  sort_pair(&array[low + 3], &array[low + 4]);
  //  sort_pair(&array[low], &array[low + 1]);
  //  sort_pair(&array[low + 1], &array[low + 2]);
  //  sort_pair(&array[low + 2], &array[low + 3]);
  //  sort_pair(&array[low], &array[low + 1]);
  //  sort_pair(&array[low + 1], &array[low + 2]);
  //  sort_pair(&array[low], &array[low + 1]);
  //} else if (high - low >= 4) {
  //  sort_pair(&array[low], &array[low + 1]);
  //  sort_pair(&array[low + 1], &array[low + 2]);
  //  sort_pair(&array[low + 2], &array[low + 3]);
  //  sort_pair(&array[low + 3], &array[low + 4]);
  //  sort_pair(&array[low], &array[low + 1]);
  //  sort_pair(&array[low + 1], &array[low + 2]);
  //  sort_pair(&array[low + 2], &array[low + 3]);
  //  sort_pair(&array[low], &array[low + 1]);
  //  sort_pair(&array[low + 1], &array[low + 2]);
  //  sort_pair(&array[low], &array[low + 1]);
  //} else if (high - low >= 3) {
  //  sort_pair(&array[low], &array[low + 1]);
  //  sort_pair(&array[low + 1], &array[low + 2]);
  //  sort_pair(&array[low + 2], &array[low + 3]);
  //  sort_pair(&array[low], &array[low + 1]);
  //  sort_pair(&array[low + 1], &array[low + 2]);
  //  sort_pair(&array[low], &array[low + 1]);
  //} else if (high - low >= 2) {
  //  sort_pair(&array[low], &array[low + 1]);
  //  sort_pair(&array[low + 1], &array[low + 2]);
  //  sort_pair(&array[low], &array[low + 1]);
  //} else if (high - low >= 1) {
  //  sort_pair(&array[low], &array[low + 1]);
  //}
}