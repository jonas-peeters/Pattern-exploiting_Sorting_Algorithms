#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int sign(int x) { return (x >> (CHAR_BIT * sizeof(x) - 1)) | (!!x); }

void merging_optimzed(int a[], int low, int mid, int high, int *b) {
  int l1, l2, i;
  l1 = low;
  l2 = mid + 1;

  int x = a[l1];
  int y = a[l2];
  for (i = low; l1 <= mid && l2 <= high; i++) {
    int c = x > y;
    l1 += 1 - c;
    l2 += c;
    b[i] = c ? y : x;
    x = a[l1];
    y = a[l2];
  }

  while (l1 <= mid) {
    b[i++] = a[l1++];
  }

  while (l2 <= high) {
    b[i++] = a[l2++];
  }

  for (i = low; i <= high; i++) {
    a[i] = b[i];
  }
}

void sort_merge_o(int a[], int low, int high, int *b) {
  int mid;

  if (low < high) {
    mid = (low + high) / 2;
    sort_merge_o(a, low, mid, b);
    sort_merge_o(a, mid + 1, high, b);
    merging_optimzed(a, low, mid, high, b);
  } else {
    return;
  }
}

void sort_merge_optimized(int a[], int low, int high) {
  int *b = malloc(sizeof(int32_t) * (high - low));
  sort_merge_o(a, low, high, b);
  free(b);
}