#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#include <emmintrin.h> //SSE2
#include <immintrin.h> //AVX, AVX2, AVX-512
#include <nmmintrin.h> //SSE4.2
#include <pmmintrin.h> //SSE3
#include <smmintrin.h> //SSE4.1
#include <xmmintrin.h> //for SSE

int sign(int x) { return (x >> (CHAR_BIT * sizeof(x) - 1)) | (!!x); }

void merging_optimized(int a[], int64_t low, int64_t mid, int64_t high, int *b) {
  int64_t l1, l2, i;
  l1 = low;
  l2 = mid + 1;

  
  for (i = low; l1 <= mid && l2 <= high; i++) {
    int c = a[l1] > a[l2];
    b[i] = c ? a[l2] : a[l1];
    l1 += 1 - c;
    l2 += c;
  }

  while (l1 <= mid) {
    b[i++] = a[l1++];
  }

  while (l2 <= high) {
    b[i++] = a[l2++];
  }

  for (i = low; i <= high; i++) {
    a[i] = b[i];
  }
}

void sort_merge_o(int a[], int64_t low, int64_t high, int *b) {
  int64_t mid;

  if (low < high) {
    mid = (low + high) / 2;
    sort_merge_o(a, low, mid, b);
    sort_merge_o(a, mid + 1, high, b);
    merging_optimized(a, low, mid, high, b);
  } else {
    return;
  }
}

void sort_merge_optimized(int a[], int64_t low, int64_t high) {
  int *b = (int*) malloc(sizeof(int32_t) * (high - low + 1));
  sort_merge_o(a, low, high, b);
  free(b);
}