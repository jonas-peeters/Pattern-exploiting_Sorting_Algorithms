#include <stdint.h>
#include <stdio.h>

#define TIM_INSERTION_THRESHOLD 20
#define TIM_RUN 32

void insertionSortStd(int array[], int64_t low, int64_t high);
int min(int x, int y);
int max(int x, int y);

void merge(int arr[], int l, int m, int r) { // using the merge function, the sorted chunks of size 32 are merged into one
    int len1 = m - l + 1, len2 = r - m;
    int left[len1], right[len2];
    for (int i = 0; i < len1; i++)
        left[i] = arr[l + i]; // Filling left array
    for (int i = 0; i < len2; i++)
        right[i] = arr[m + 1 + i]; // Filling right array
    int i = 0;
    int j = 0;
    int k = l;
    while (i < len1 && j < len2) { // Iterate into both arrays left and right
        if (left[i] <= right[j]) { // IF element in left is less then increment i by pushing into larger array
            arr[k] = left[i];
            i++;
        } else {
            arr[k] = right[j]; // Element in right array is greater increment j
            j++;
        }
        k++;
    }
    while (i < len1) { // This loop copies remaining element in left array
        arr[k] = left[i];
        k++;
        i++;
    }
    while (j < len2) { // This loop copies remaining element in right array
        arr[k] = right[j];
        k++;
        j++;
    }
}

void timsort_h(int arr[], int n) {
    for (int i = 0; i < n; i += TIM_RUN)
        insertionSortStd(arr, i, min((i + 31), (n - 1))); //Call insertionSort()

    for (int s = TIM_RUN; s < n; s = 2 * s) { // Start merging from size RUN (or 32). It will continue upto 2*RUN
        // pick starting point of  left sub array. We  are going to merge  arr[left..left+size-1]
        // and arr[left+size, left+2*size-1]
        // After every merge, we
        // increase left by 2*size
        for (int left = 0; left < n; left += 2 * s) {
            int mid = left + s - 1; // find ending point of  left sub array  mid+1 is starting point  of right sub array
            int right = min((left + 2 * s - 1), (n - 1));
            merge(arr, left, mid, right); // merge sub array arr[left.....mid] &  arr[mid+1....right]
        }
    }
}

void timsort(int array[], int low, int high) {
    printf("Sorting from %d to %d aka %d elements\n", low, high, high - low + 1);

    timsort_h(&array[low], high - low + 1);
}