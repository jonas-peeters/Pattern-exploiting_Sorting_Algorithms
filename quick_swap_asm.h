#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void swap(int *a, int *b);
int median_of_three_of_median_of_three(int array[], int low, int high);
void insertionSort(int array[], int n);

int partition_quick_optimized_swap_asm(int array[], int64_t low, int64_t high) {
  int pivot = median_of_three_of_median_of_three(array, low, high);
  
  // CMOV
  asm volatile("    movq    %[i], %%r12\n"
               "1:\n"
               "\n" // Loop start
               "    movl     (%[array],%%r12,4), %%r8d\n"
               "    movl     (%[array],%[i],4), %%r9d\n"
               "    xorq      %%r10, %%r10\n"
               "    cmp      %[pivot], %%r8d\n"
               "    setl     %%r10b\n"
               "    movl     %%r9d, %%r11d\n"
               "    cmovll   %%r8d, %%r11d\n"
               "    movl     %%r11d, (%[array],%[i],4)\n"
               "    cmovll   %%r9d, %%r8d\n"
               "    movl     %%r8d, (%[array],%%r12,4)\n"
               "    addq     %%r10, %[i]\n"
               "\n" // Loop end
               "    incq     %%r12\n"
               "    cmp      %%r12, %[high]\n"
               "    jne      1b\n"
               "\n" // Swap pivot back
               "    movl     (%[array],%[i],4), %%r9d\n"
               "    movl     (%[array],%[high],4), %%r8d\n"
               "    movl     %%r9d, (%[array],%[high],4)\n"
               "    movl     %%r8d, (%[array],%[i],4)\n"
               : [i] "+r"(low)
               : [array] "r"(array), [pivot] "r"(pivot), [high] "r"(high)
               : "cc", "r8", "r9", "r10", "r11", "r12");
  return (low);
}

void sort_quick_optimized_swap_asm(int array[], int low, int high) {
  if (low < high) {
    if (high - low > 20) {
      int pi = partition_quick_optimized_swap_asm(array, low, high);
      sort_quick_optimized_swap_asm(array, low, pi - 1);
      sort_quick_optimized_swap_asm(array, pi + 1, high);
    } else {
      insertionSort(array + low, high - low + 1);
    }
  }
}
