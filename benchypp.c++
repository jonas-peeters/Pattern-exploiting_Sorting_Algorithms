
#include "data-random.h"
#include "swap.h"
#include "const.h"
#include "tim/timsort.h"

#include <math.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <algorithm>
#include <iostream>
#include <time.h>
#include <unistd.h>
#include <x86intrin.h>

//using namespace std;


const int DATA_AMOUNT = 2000000;
#define MIN_RUNS_PER_BENCH 10
#define MAX_RUNS_PER_BENCH 10000

void shuffle_data(int data_to_sort[], int size) {
  size_t i;
  for (i = 0; i < size; i++) {
    size_t j = (i + rand()) % size;
    int t = data_to_sort[j];
    data_to_sort[j] = data_to_sort[i];
    data_to_sort[i] = t;
  }
}

float individual_times[MAX_RUNS_PER_BENCH];
float reference_value = 0;

void bench(void (*fun)(int *, int *), int64_t array_size, int data_to_sort[]) {

  // printf("Testing %s with array size %d: ", name, array_size);

  clock_t total = 0;
  int runs = 0;
  while ((total < 400000000 || runs < MIN_RUNS_PER_BENCH) &&
         runs < MAX_RUNS_PER_BENCH) {
    runs++;
    shuffle_data(data_to_sort, array_size);
    // struct timespec start, stop;
    uint64_t start = __rdtsc();
    fun(data_to_sort, data_to_sort + array_size);
    uint64_t stop = __rdtsc();
    total += (stop - start);
    individual_times[runs - 1] = (float)(stop - start) / CLOCKS_PER_SEC * 1000;

    /*if (runs == 1 && array_size == 10) {
      printf("\n");
      for (int i = 0; i < array_size; i++) {
        printf("%d ", data_to_sort[i]);
      }
      printf("\n");
    }*/

    if (runs == 1) {
      for (int index = 0; index < array_size - 1; index++) {
        if (data_to_sort[index] > data_to_sort[index + 1]) {
          printf("\nArray ");
          for (int64_t pindex = 0; pindex <= array_size; pindex++) {
            printf("%d ", data_to_sort[pindex]);
          }
          // printf("\n");

          printf("Integrity check failed at index %d\n", index + 1);
          exit(1);
        }
      }
    }
  }

  float mean = (float)(total)*1000 / CLOCKS_PER_SEC / runs;
  float sum = 0;
  for (int index = 0; index < runs; index++) {
    float diff = mean - individual_times[index];
    float square = powf(diff, 2);
    sum += square;
  }
  float std_dev = sqrtf(sum / (float)runs);

  if (reference_value == 0) {
    reference_value = mean;
  }

  char *output = (char *)malloc(20 * sizeof(char));
  //sprintf(output, "%.2f±%.2f", mean, std_dev);
  if (mean < 1) {
    sprintf(output, "%.2f±%.2f %.0f%%", mean, std_dev, mean / reference_value * 100);
  } else if (mean < 10) {
    sprintf(output, "%.1f±%.1f %.0f%%", mean, std_dev, mean / reference_value * 100);
  } else {
    sprintf(output, "%.0f±%.0f %.0f%%", mean, std_dev, mean / reference_value * 100);
  }

  for (int index = 0; index < 20; index++) {
    if (output[index] == '\0') {
      output[index] = ' ';
    }
  }
  printf("%s", output);

  free(output);
}

int main() {
  printf("Starting\n");
  int64_t array_sizes[5] = {100, 1000, 10000, 100000, 1000000};

  int data_to_sort[DATA_AMOUNT];

  printf("Generating random data\n");
  random_data(data_to_sort, DATA_AMOUNT);

  for (int i = 0; i < sizeof array_sizes / sizeof array_sizes[0]; i++) {
    reference_value = 0;
    bench(std::sort, array_sizes[i], data_to_sort);
    bench(tim::timsort, array_sizes[i], data_to_sort);
    printf("\n");
  }
}
