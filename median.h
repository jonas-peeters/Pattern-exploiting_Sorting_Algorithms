int min(int x, int y);
int max(int x, int y);

void sort_indexes(int array[], int *i1, int *i2) {
  int x = *i1;
  int y = *i2;
  int c = array[*i1] <= array[*i2];
  *i1 = c ? x : y;
  *i2 = c ? y : x;
}

int median_of_three(int array[], int low, int high) {
  if (high - low < 2) {
    return array[high];
  }

  int l = low;
  int m = (low + high) / 2;
  int h = high;

  sort_indexes(array, &l, &m);
  sort_indexes(array, &m, &h);
  sort_indexes(array, &l, &m);

  swap(&array[m], &array[high]);

  return array[high];
}

void sort_pair(int *i1, int *i2) {
  int x = *i1;
  int y = *i2;
  int c = x < y;
  *i1 = c ? x : y;
  *i2 = c ? y : x;
}

int median_of_three_auto_finish(int array[], int low, int high, int *done) {
  if (high - low == 1) {
    *done = true;
    sort_pair(&array[low], &array[high]);
    return array[high];
  }

  int mid = (low + high) / 2;
  int x = array[low];
  int y = array[mid];
  int z = array[high];

  sort_pair(&x, &y);
  sort_pair(&y, &z);
  sort_pair(&x, &y);

  if (high - low == 2) {
    *done = true;
    array[low] = x;
    array[mid] = y;
    array[high] = z;
    return y;
  }

  array[low] = x;
  array[high] = y;
  array[mid] = z;

  return y;
}

inline int median_of_three_stable(int array[], int low, int high) {
  if (high - low > 2) {
    //int offset = (high - low) / 3;
    //int lowmid = low + offset;
    //int highmid = low + offset + offset;
    //sort_indexes(array, &low, &lowmid);
    //sort_indexes(array, &lowmid, &highmid);
    //sort_indexes(array, &highmid, &high);
    //sort_indexes(array, &low, &lowmid);
    //sort_indexes(array, &lowmid, &highmid);
    //sort_indexes(array, &low, &lowmid);
    //return array[lowmid];

    int mid = (low + high) / 2;
    sort_indexes(array, &low, &mid);
    sort_indexes(array, &mid, &high);
    sort_indexes(array, &low, &mid);
    return array[mid];

  } if (high - low == 2) {
    int mid = low + 1;
    sort_pair(&array[low], &array[mid]);
    sort_pair(&array[mid], &array[high]);
    sort_pair(&array[low], &array[mid]);
    return array[mid];
  } else if (high - low == 1) {
    sort_pair(&array[low], &array[high]);
    return array[high];
  } else {
    return array[high];
  }
}

int median_of_three_of_median_of_three(int array[], int low, int high) {
  if (high - low < 100) {
    return median_of_three(array, low, high);
  } else {
    int offset = (high - low) / 8;

    int a = low;
    int b = low + offset;
    int c = low + offset * 2;
    sort_indexes(array, &a, &b);
    sort_indexes(array, &b, &c);
    sort_indexes(array, &a, &b);

    int d = low + offset * 3;
    int e = low + offset * 4;
    int f = low + offset * 5;
    sort_indexes(array, &d, &e);
    sort_indexes(array, &e, &f);
    sort_indexes(array, &d, &e);
    
    int g = low + offset * 6;
    int h = low + offset * 7;
    int i = high;
    sort_indexes(array, &g, &h);
    sort_indexes(array, &h, &i);
    sort_indexes(array, &g, &h);
    
    sort_indexes(array, &b, &e);
    sort_indexes(array, &e, &h);
    sort_indexes(array, &b, &e);

    swap(&array[e], &array[high]);

    return array[high];
  }
}

void sort_indexes_opti(int array[], int *i1, int *i2, int *sorted) {
  int x = *i1;
  int y = *i2;
  int c = array[*i1] <= array[*i2];
  *i1 = c ? x : y;
  *i2 = c ? y : x;
  *sorted += c;
}

int median_of_three_opti(int array[], int low, int high, int *sorted) {
  if (high - low < 2) {
    return array[high];
  }

  int l = low;
  int m = (low + high) / 2;
  int h = high;

  sort_indexes_opti(array, &l, &m, sorted);
  sort_indexes_opti(array, &m, &h, sorted);
  sort_indexes(array, &l, &m);

  //swap(&array[m], &array[high]);

  return m;
}

int median_of_three_of_median_of_three_opti(int array[], int low, int high, int *sorted) {
  if (high - low < 50) {
    return median_of_three_opti(array, low, high, sorted);
  } else {
    int offset = (high - low) / 9;

    int a = low;
    int b = low + offset;
    int c = low + offset * 2;
    sort_indexes_opti(array, &a, &b, sorted);
    sort_indexes_opti(array, &b, &c, sorted);
    sort_indexes(array, &a, &b);

    int d = low + offset * 3;
    int e = low + offset * 4;
    int f = low + offset * 5;
    sort_indexes_opti(array, &d, &e, sorted);
    sort_indexes_opti(array, &e, &f, sorted);
    sort_indexes(array, &d, &e);
    
    int g = low + offset * 6;
    int h = low + offset * 7;
    int i = high;
    sort_indexes_opti(array, &g, &h, sorted);
    sort_indexes_opti(array, &h, &i, sorted);
    sort_indexes(array, &g, &h);
    
    sort_indexes(array, &b, &e);
    sort_indexes(array, &e, &h);
    sort_indexes(array, &b, &e);

    //swap(&array[e], &array[high]);

    return e;
  }
}