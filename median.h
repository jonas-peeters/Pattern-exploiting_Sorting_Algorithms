int min(int x, int y);
int max(int x, int y);

int median_of_three(int array[], int64_t low, int64_t high) {
  if (high - low < 2) {
    return array[high];
  }

  int mid = (low + high) / 2;
  int x = array[low];
  int y = array[mid];
  int z = array[high];

  int smallest = min(min(x, y), z);
  int largest = max(max(x, y), z);
  int median = x + y + z - smallest - largest;

  array[low] = smallest;
  array[high] = median;
  array[mid] = largest;

  return median;
}

inline void sort_pair(int *i1, int *i2) {
  int x = *i1;
  int y = *i2;
  int c = x < y;
  *i1 = c ? x : y;
  *i2 = c ? y : x;
}

inline int median_of_three_auto_finish(int array[], int64_t low, int64_t high, int *done) {
  if (high - low == 1) {
    *done = true;
    sort_pair(&array[low], &array[high]);
    return array[high];
  }

  int mid = (low + high) / 2;
  int x = array[low];
  int y = array[mid];
  int z = array[high];

  sort_pair(&x, &y);
  sort_pair(&y, &z);
  sort_pair(&x, &y);

  if (high - low == 2) {
    *done = true;
    array[low] = x;
    array[mid] = y;
    array[high] = z;
    return y;
  }

  array[low] = x;
  array[high] = y;
  array[mid] = z;

  return y;
}

int median_of_three_of_median_of_three_auto_finish(int array[], int64_t low, int64_t high, int *done) {
  if (high - low > 30) {
    //int64_t offset = (high - low) / 9;
    //int a = array[low];
    //int b = array[low + offset * 1];
    //int c = array[low + offset * 2];
    //sort_pair(&a, &b);
    //sort_pair(&b, &c);
    //sort_pair(&a, &b);

    //int d = array[low + offset * 3];
    //int e = array[low + offset * 4];
    //int f = array[low + offset * 5];
    //sort_pair(&d, &e);
    //sort_pair(&e, &f);
    //sort_pair(&d, &e);

    //int g = array[low + offset * 6];
    //int h = array[low + offset * 7];
    //int i = array[high];
    //sort_pair(&g, &h);
    //sort_pair(&h, &i);
    //sort_pair(&g, &h);
    //
    //sort_pair(&b, &e);
    //sort_pair(&e, &h);
    //sort_pair(&b, &e);

    //array[low] = a;
    //array[low + offset * 1] = b;
    //array[low + offset * 2] = d;
    //array[low + offset * 3] = g;
    //array[low + offset * 4] = c;
    //array[low + offset * 5] = f;
    //array[low + offset * 6] = h;
    //array[low + offset * 7] = i;
    //array[high] = e;

    //printf("Median of three of median of three: %d\n", y);

    int64_t offset = (high - low) / 9;
    sort_pair(&array[low], &array[low + offset * 1]);
    sort_pair(&array[low + offset * 1], &array[low + offset * 2]);
    sort_pair(&array[low], &array[low + offset * 1]);
    sort_pair(&array[low + offset * 3], &array[low + offset * 4]);
    sort_pair(&array[low + offset * 4], &array[low + offset * 5]);
    sort_pair(&array[low + offset * 3], &array[low + offset * 4]);
    sort_pair(&array[low + offset * 6], &array[low + offset * 7]);
    sort_pair(&array[low + offset * 7], &array[high]);
    sort_pair(&array[low + offset * 6], &array[low + offset * 7]);
    sort_pair(&array[low + offset * 1], &array[low + offset * 4]);
    sort_pair(&array[low + offset * 4], &array[low + offset * 7]);
    sort_pair(&array[low + offset * 1], &array[low + offset * 4]);

    swap(&array[low + offset * 4], &array[high]);

    return array[high];
  } else {
    return median_of_three_auto_finish(array, low, high, done);
  }
}