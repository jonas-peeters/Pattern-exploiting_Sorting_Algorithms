#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#include <emmintrin.h> //SSE2
#include <immintrin.h> //AVX, AVX2, AVX-512
#include <nmmintrin.h> //SSE4.2
#include <pmmintrin.h> //SSE3
#include <smmintrin.h> //SSE4.1
#include <xmmintrin.h> //for SSE

void swap(int *a, int *b);
void insertionSortOptimized(int array[], int n);
void sort_quick_optimized(int array[], int64_t low, int64_t high);
uint32_t hsum_8x32(__m256i v);
int x[2];

void partition_quick_multi_inplace(int array[], int64_t low, int64_t high,
                                   int targets[]) {
  __m256i pivots = _mm256_loadu_si256((__m256i *)&array[low]);
  sort_quick_optimized(array, low, low + 7);

  for (int64_t j = low + 8; j <= high; j++) {

    __m256i currentValue = _mm256_set1_epi32(array[j]);
    __m256i compares = _mm256_cmpgt_epi32(pivots, currentValue);

    int64_t index = 8 + hsum_8x32(compares);

    //int64_t prev = ;
    for (int i = 0; i < 9; i++) {
      int c = i >= index;
      int x = array[j];
      int y = array[targets[i]];
      array[j] = c ? y : x;
      array[targets[i]] = c ? x :y;
      targets[i] += c;
    }
  }
}

void sort_quick_multi_inplace_h(int array[], int64_t low, int64_t high) {
  // printf("Sorting from %d to %d\n", low, high);
  if (low < high) {
    if (high - low > 200) {
      int pivots[9] = {low, low + 1, low + 2, low + 3, low + 4, low + 5, low + 6, low + 7, low + 8};
      partition_quick_multi_inplace(array, low, high, pivots);
      // printf("Pivots ");
      // for (int64_t index = 0; index < 9; index++) {
      //   printf("%d ", pivots[index]);
      // }
      // printf("\n");

      sort_quick_multi_inplace_h(array, low, pivots[0] - 1);
      for (int64_t index = 1; index < 9; index++) {
        sort_quick_multi_inplace_h(array, pivots[index - 1], pivots[index] - 1);
      }
    } else {
      sort_quick_optimized_h(array, low, high);
      // insertionSortOptimized(array + low, high - low + 1);
    }
  }
}

void sort_quick_multi_inplace(int array[], int64_t low, int64_t high) {
  sort_quick_multi_inplace_h(array, low, high + 1);
}
