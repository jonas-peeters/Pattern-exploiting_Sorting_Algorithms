#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#include <emmintrin.h> //SSE2
#include <immintrin.h> //AVX, AVX2, AVX-512
#include <nmmintrin.h> //SSE4.2
#include <pmmintrin.h> //SSE3
#include <smmintrin.h> //SSE4.1
#include <xmmintrin.h> //for SSE

const int INSERTION_SORT_THRESH_SWAP = 0;

void swap(int *a, int *b);
int median_of_three(int array[], int low, int high);
void insertionSortOptimized(int array[], int n);
int x[2];

int partition_quick_optimized_swap(int array[], int low, int high) {
  int pivot = high - low >= 2 ? median_of_three(array, low, high) : array[high];
  int i = low;
  for (int j = low; j < high; j++) {
    int c = pivot > array[j];
    int d = array[i] * c + array[j] * (1 - c);
    int f = array[i] * (1 - c) + array[j] * c;
    array[j] = d;
    array[i] = f;
    i += c;
  }
  swap(&array[i], &array[high]);
  return (i);
}

void sort_quick_optimized_swap(int array[], int low, int high) {
  if (low < high) {
    if (high - low > INSERTION_SORT_THRESH_SWAP) {
      int pi = partition_quick_optimized_swap(array, low, high);
      sort_quick_optimized_swap(array, low, pi - 1);
      sort_quick_optimized_swap(array, pi + 1, high);
    } else {
      insertionSortOptimized(array + low, high - low + 1);
    }
  }
}
