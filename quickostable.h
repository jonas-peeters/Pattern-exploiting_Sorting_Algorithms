#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#include <emmintrin.h> //SSE2
#include <immintrin.h> //AVX, AVX2, AVX-512
#include <nmmintrin.h> //SSE4.2
#include <pmmintrin.h> //SSE3
#include <smmintrin.h> //SSE4.1
#include <xmmintrin.h> //for SSE

void swap(int *a, int *b);
void insertionSortOptimized(int array[], int n);
void sort_quick_multix4_h(int array[], int64_t low, int64_t high, int tmp[]);
void sort_quick_optimized(int array[], int64_t low, int64_t high);
int median_of_three_stable(int array[], int64_t low, int64_t high);
int x[2];

void partition_quick_stable(int array[], int tmp[], int reverse, int64_t low, int64_t high, int64_t low_target, int64_t *smaller, int64_t *larger, int64_t *equal) {
  int *from = reverse ? tmp : array;

  int pivot = median_of_three_stable(from, low, high);
  
  int64_t i = low_target;
  int64_t k = low;
  int64_t h = low_target + high - low;

  //int64_t j = low;

  //printf("\nPivot %d\n", pivot);
  //printf("Before asm: i: %d, k: %d, h: %d, j: %d, low: %d, high: %d\n", i, k, h, j, low, high);
  //printf("Array before ");
  //for (int u = 0; u < 10; u++) {
  //  printf("%d ", array[u]);
  //}
  //printf("\n");
  //printf("TMP before  ");
  //for (int u = 0; u < 10; u++) {
  //  printf("%d ", tmp[u]);
  //}
  //printf("\n");

  asm volatile("    movq     %[k], %%r11\n"
               "1:\n"
               "\n" // Loop start
               "    movl     (%[from],%%r11,4), %%r8d\n"
               //"    movl     $1, %%r12d\n"
  
               "    xorq     %%r10, %%r10\n"
               "    movl     (%[array],%[i],4), %%r9d\n"
               "    cmp      %[pivot], %%r8d\n"
               "    setl     %%r10b\n"
               //"    cmovll   %%r12d, %%r10d\n"
               "    cmovll   %%r8d, %%r9d\n"
               "    movl     %%r9d, (%[array],%[i],4)\n"
               "    addq     %%r10, %[i]\n" 
  
               "    xorq     %%r10, %%r10\n"
               "    movl     (%[tmp],%[k],4), %%r9d\n"
               "    cmp      %[pivot], %%r8d\n"
               "    setg     %%r10b\n"
               //"    cmovgl   %%r12d, %%r10d\n"
               "    cmovgl   %%r8d, %%r9d\n"
               "    movl     %%r9d, (%[tmp],%[k],4)\n"
               "    addq     %%r10, %[k]\n"
  
               "    xorq     %%r10, %%r10\n"
               "    movl     (%[tmp],%[h],4), %%r9d\n"
               "    cmp      %[pivot], %%r8d\n"
               "    sete     %%r10b\n"
               //"    cmovel   %%r12d, %%r10d\n"
               "    cmovel   %%r8d, %%r9d\n"
               "    movl     %%r9d, (%[tmp],%[h],4)\n"
               "    subq     %%r10, %[h]\n"
  
               "\n" // Loop end
               "    incq     %%r11\n"
               "    cmp      %[high], %%r11\n"
               "    jle      1b\n"
               : [i] "+r"(i), [k] "+r"(k), [h] "+r"(h)
               : [array] "r"(array), [tmp] "r"(tmp), [from] "r"(from), [pivot] "r"(pivot), [high] "r"(high)
               : "cc", "r8", "r9", "r10", "r11");

  //printf("After asm: i: %d, k: %d, h: %d, j: %d\n", i, k, h, j);
  //printf("Array after  ");
  //for (int u = 0; u < 10; u++) {
  //  printf("%d ", array[u]);
  //}
  //printf("\n");
  //printf("TMP after   ");
  //for (int u = 0; u < 10; u++) {
  //  printf("%d ", tmp[u]);
  //}
  //printf("\n");

  //for (int64_t j = low; j <= high; j++) {
  //  int x = from[j];
  //  if (pivot > x) {
  //    array[i++] = x;
  //  }
  //  if (pivot < x) {
  //    tmp[k++] = x;
  //  }
  //  if (pivot == x) {
  //    tmp[h--] = x;
  //  }
  //}

  *smaller = i - 1;
  *larger = k - 1;
  for (int j = low_target + high - low; j > h; j--) {
    array[i++] = tmp[j];
  }
  *equal = i - 1;
  //printf("Array end  ");
  //for (int u = 0; u < 10; u++) {
  //  printf("%d ", array[u]);
  //}
  //printf("\n");
}

void sort_quick_stable_h(int array[], int tmp[], int64_t low, int64_t high);

void sort_quick_stable_reverse_h(int array[], int tmp[], int64_t low, int64_t high, int64_t low_target) {
  //printf("Sort reverse from %d to %d\n", low, high);
  if (high - low > 2) {
    int64_t smaller, larger, equal;
    partition_quick_stable(array, tmp, true, low, high, low_target, &smaller, &larger, &equal);
    sort_quick_stable_reverse_h(array, tmp, low, larger, equal + 1);
    sort_quick_stable_h(array, tmp, low_target, smaller);
  } else if (low < high) {
    median_of_three_stable(tmp, low, high);
    for (int i = 0; i <= high - low; i++) {
      array[low_target + i] = tmp[i + low];
    }
  }
}

void sort_quick_stable_h(int array[], int tmp[], int64_t low, int64_t high) {
  //printf("Sort from %d to %d\n", low, high);
  if (high - low > 2) {
    int64_t smaller, larger, equal;
    partition_quick_stable(array, tmp, false, low, high, low, &smaller, &larger, &equal);
    sort_quick_stable_reverse_h(array, tmp, low, larger, equal + 1);
    sort_quick_stable_h(array, tmp, low, smaller);
  } else if (low < high) {
    median_of_three_stable(array, low, high);
  }
}


void sort_quick_stable(int array[], int64_t low, int64_t high) {
  int *tmp = (int *) malloc(sizeof(int32_t) * (high - low));
  sort_quick_stable_h(array, tmp, low, high);
  free(tmp);
  //printf("\nDone\n");
  //printf("Array  ");
  //for (int u = 0; u < 10; u++) {
  //  printf("%d ", array[u]);
  //}
  //printf("\n");
}
