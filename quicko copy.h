#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>

#include "const.h"

void swap(int *a, int *b);
inline int median_of_three_auto_finish(int array[], int64_t low, int64_t high, int *done);
int median_of_three_of_median_of_three(int array[], int64_t low, int64_t high);
void sort_quick_hoare(int array[], int64_t low, int64_t high);

void reverse(int array[], int64_t low, int64_t high) {
  for (int64_t index = 0; index < (high - low + 1) / 2; index++) {
    swap(&array[low + index], &array[high - index]);
  }
}

int64_t partition_quick_optimized(int array[], int64_t low, int64_t high, int *done) {

  int pivot = median_of_three_of_median_of_three(array, low, high);
  //int startL = low;
  //int startR = high - 1;

  //while (array[startL] <= pivot && startL < startR) {
  //  startL++;
  //}
  //while (array[startR] > pivot && low < startR) {
  //  startR--;
  //}
  //if (startL == startR) {
  //  *done = true;
  //  return low;
  //}

  int64_t i = low;
  int64_t j = low;
  
  //int not_ascending = 0;

  for (; j < high; j++) {
    //not_ascending += array[j] > array[j + 1];
    int c = pivot > array[j];
    int y = array[i];
    int z = array[j];
    array[i] = c ? z : y;
    array[j] = c ? y : z;
    i += c;
  }
  swap(&array[i], &array[high]);

  //if (not_ascending < 0.0005 * size) {
  //  insertionSortStd(array, low, high);
  //  *done = true;
  //} else if (not_ascending < 0.15 * size) {
  //  sort_quick_hoare(array, low, high);
  //  *done = true;
  //}

  return (i);
}

void sort_quick_optimized_h(int array[], int64_t low, int64_t high) {
  if (low < high) {
    if (high - low > INSERTION_SORT_THRESH) {
      if (array[low] == array[high] && array[low] == array[(low + high) / 2]) {
        int not_equal = 0;
        for (int i = low + 1; i < high; i++) {
          not_equal += array[i] != array[low];
          if (not_equal > (high - low) / 5) {
            break;
          }
        }
        if (not_equal != 0) {
          if (not_equal < (high - low) / 5) {
            insertionSortStd(array, low, high);
          } else {
            int done = false;
            int64_t pi = partition_quick_optimized(array, low, high, &done);
            if (high - low > 2 && !done) {
              sort_quick_optimized_h(array, low, pi - 1);
              sort_quick_optimized_h(array, pi + 1, high);
            }
          }
        }
      } else {
        int done = false;
        int64_t pi = partition_quick_optimized(array, low, high, &done);
        if (high - low > 2 && !done) {
          sort_quick_optimized_h(array, low, pi - 1);
          sort_quick_optimized_h(array, pi + 1, high);
        }
      }
    } else {
      insertionSortStd(array, low, high);
    }
  }
}


void sort_quick_optimized(int array[], int64_t low, int64_t high) {
  int not_ascending = 0;
  int not_descending = 0;
  for (int64_t index = low; index < high; index++) {
    not_ascending += array[index] > array[index + 1];
    not_descending += array[index] < array[index + 1];
  }
  int size = high - low + 1;
  if (not_ascending == 0) {
  } else if (not_ascending < log2(size)) {
    insertionSortStd(array, low, high);
  } else if (not_ascending < 0.15 * size) {
    sort_quick_hoare(array, low, high);
  } else if (not_descending == 0) {
    reverse(array, low, high);
  } else if (not_descending < log2(size)) {
    reverse(array, low, high);
    insertionSortStd(array, low, high);
  } else if (not_descending < 0.15 * size) {
    reverse(array, low, high);
    sort_quick_hoare(array, low, high);
  } else {
    sort_quick_optimized_h(array, low, high);
  }
}