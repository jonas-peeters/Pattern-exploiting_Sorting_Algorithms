#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#include "const.h"

#include <emmintrin.h> //SSE2
#include <immintrin.h> //AVX, AVX2, AVX-512
#include <nmmintrin.h> //SSE4.2
#include <pmmintrin.h> //SSE3
#include <smmintrin.h> //SSE4.1
#include <xmmintrin.h> //for SSE

void swap(int *a, int *b);
int median_of_three_auto_finish(int array[], int64_t low, int64_t high, int *done);
void insertionSortOptimized(int array[], int n);
int x[2];

int64_t partition_quick_optimized_swap_asm(int array[], int64_t low, int64_t high) {
  int done = 0;
  int pivot = median_of_three_auto_finish(array, low, high, &done);
  if (done) {
    return (low + high) / 2;
  }
  // CMOV
  asm volatile("    movq    %[i], %%r12\n"
               "1:\n"
               "\n" // Loop start
               "    movl     (%[array],%%r12,4), %%r8d\n"
               "    movl     (%[array],%[i],4), %%r9d\n"
               "    xorq      %%r10, %%r10\n"
               "    cmp      %[pivot], %%r8d\n"
               "    setl     %%r10b\n"
               "    movl     %%r8d, %%r11d\n"
               "    cmovll   %%r9d, %%r11d\n"
               "    movl     %%r11d, (%[array],%%r12,4)\n"
               "    cmovll   %%r8d, %%r9d\n"
               "    movl     %%r9d, (%[array],%[i],4)\n"

               //"    addl     %%r8d, %%r9d\n"
               //"    subl     %%r11d, %%r9d\n"
               //"    movl     %%r9d, (%[array],%[i],4)\n"

               "    addq     %%r10, %[i]\n"
               "\n" // Loop end
               "    incq     %%r12\n"
               "    cmp      %%r12, %[high]\n"
               "    jne      1b\n"
               "\n" // Swap pivot back
               "    movl     (%[array],%[i],4), %%r9d\n"
               "    movl     (%[array],%[high],4), %%r8d\n"
               "    movl     %%r9d, (%[array],%[high],4)\n"
               "    movl     %%r8d, (%[array],%[i],4)\n"
               : [i] "+r"(low)
               : [array] "r"(array), [pivot] "r"(pivot), [high] "r"(high)
               : "cc", "r8", "r9", "r10", "r11", "r12");

  // Arith
  // asm volatile("    movq    %[i], %%r12\n"
  //             "1:\n"
  //             "\n" // Loop start
  //             "    movl     (%[array],%%r12,4), %%r8d\n"
  //             "    movl     (%[array],%[i],4), %%r9d\n"
  //             "    xorq     %%r10, %%r10\n"
  //             "    cmp      %[pivot], %%r8d\n"
  //             "    setl     %%r10b\n"
  //             "    movl     $1, %%r15d\n"
  //             "    movl     %%r8d, %%r13d\n"
  //             "    movl     %%r9d, %%r14d\n"
  //             "    sub      %%r10d, %%r15d\n"
  //             "    imull    %%r10d, %%r13d\n"
  //             "    imull    %%r10d, %%r14d\n"
  //             "    imull    %%r15d, %%r8d\n"
  //             "    imull    %%r15d, %%r9d\n"
  //             "    add      %%r8d, %%r14d\n"
  //             "    add      %%r9d, %%r13d\n"
  //             "    movl     %%r14d, (%[array],%%r12,4)\n"
  //             "    movl     %%r13d, (%[array],%[i],4)\n"
  //             "    addq     %%r10, %[i]\n"
  //             "\n" // Loop end
  //             "    incq     %%r12\n"
  //             "    cmp      %%r12, %[high]\n"
  //             "    jne      1b\n"
  //             "\n" // Swap pivot back
  //             "    movl     (%[array],%[i],4), %%r9d\n"
  //             "    movl     (%[array],%[high],4), %%r8d\n"
  //             "    movl     %%r9d, (%[array],%[high],4)\n"
  //             "    movl     %%r8d, (%[array],%[i],4)\n"
  //             : [i] "+r"(low)
  //             : [array] "r"(array), [pivot] "r"(pivot), [high] "r"(high)
  //             : "cc", "r8", "r9", "r10", "r11", "r12", "r13", "r14", "r15");

  return (low);
}

void sort_quick_optimized_swap_asm(int array[], int64_t low, int64_t high) {
  if (low < high) {
    if (high - low > INSERTION_SORT_THRESH) {
      int64_t pi = partition_quick_optimized_swap_asm(array, low, high);
      sort_quick_optimized_swap_asm(array, low, pi - 1);
      sort_quick_optimized_swap_asm(array, pi + 1, high);
    } else {
      insertionSortOptimized(array + low, high - low + 1);
    }
  }
}
