#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#include "const.h"

#include <emmintrin.h> //SSE2
#include <immintrin.h> //AVX, AVX2, AVX-512
#include <nmmintrin.h> //SSE4.2
#include <pmmintrin.h> //SSE3
#include <smmintrin.h> //SSE4.1
#include <xmmintrin.h> //for SSE

void swap(int *a, int *b);
int median_of_three(int array[], int low, int high);
void insertionSortOptimized(int array[], int n);
int x[2];

int partition_quick_optimized_swap_asm(int array[], int64_t low, int64_t high) {
  int pivot = high - low >= 2 ? median_of_three(array, low, high) : array[high];
  // int64_t i = low;

  // printf("Pivot: %d\n", pivot);

  // for (int64_t j = low; j < high; j++) {

  // int c;

  /*printf("Before %d (i=%d, j=%d)\n", array[j], i, j);
  for (int imdex = 0; imdex < 10; imdex++) {
    printf("%d ", array[imdex]);
  }
  printf("\n");*/

  asm volatile("    movq    %[i], %%r12\n"
               "1:\n"
               "\n"
               "    movl     (%[array],%%r12,4), %%r8d\n"
               "    movl     (%[array],%[i],4), %%r9d\n"
               "    xorq      %%r10, %%r10\n"
               "    cmp      %[pivot], %%r8d\n"
               "    setl     %%r10b\n"
               "    movl     %%r8d, %%r11d\n"
               "    cmovll   %%r9d, %%r11d\n"
               "    movl     %%r11d, (%[array],%%r12,4)\n"
               "    cmovll   %%r8d, %%r9d\n"
               "    movl     %%r9d, (%[array],%[i],4)\n"
               "    addq     %%r10, %[i]\n"
               "\n"
               "    incq     %%r12\n"
               "    cmp      %%r12, %[high]\n"
               "    jne      1b\n"
               "\n"
               "    movl     (%[array],%[i],4), %%r9d\n"
               "    movl     (%[array],%[high],4), %%r8d\n"
               "    movl     %%r9d, (%[array],%[high],4)\n"
               "    movl     %%r8d, (%[array],%[i],4)\n"
               : [i] "+r"(low)
               : [array] "r"(array), [pivot] "r"(pivot), [high] "r"(high)
               : "cc", "r8", "r9", "r10", "r11", "r12");

  /*printf("After %d (i=%d, j=%d)\n", array[j], i, j+1);
  for (int imdex = 0; imdex < 10; imdex++) {
    printf("%d ", array[imdex]);
  }
  printf("\n\n");*/

  /*c = pivot > array[j];
  int d = array[i] * c + array[j] * (1 - c);
  int f = array[i] * (1 - c) + array[j] * c;
  array[j] = d;
  array[i] = f;
  i += c;*/
  //}
  //  swap(&array[i], &array[high]);
  return (low);
}

void sort_quick_optimized_swap_asm(int array[], int64_t low, int64_t high) {
  if (low < high) {
    if (high - low > INSERTION_SORT_THRESH) {
      int pi = partition_quick_optimized_swap_asm(array, low, high);
      sort_quick_optimized_swap_asm(array, low, pi - 1);
      sort_quick_optimized_swap_asm(array, pi + 1, high);
    } else {
      insertionSortOptimized(array + low, high - low + 1);
    }
  }
}
