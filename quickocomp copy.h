#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>

#include "const.h"

template <typename T>
void swap_comp(T *a, T *b) {
  T c = *a;
  *a = *b;
  *b = c;
};

template <typename T>
void sort_indexes_comp(T array[], int *i1, int *i2) {
  int x = *i1;
  int y = *i2;
  int c = array[*i1] <= array[*i2];
  *i1 = c ? x : y;
  *i2 = c ? y : x;
}

template <typename T>
T median_of_three_comp(T array[], int low, int high) {
  if (high - low < 2) {
    return array[high];
  }

  int l = low;
  int m = (low + high) / 2;
  int h = high;

  sort_indexes_comp(array, &l, &m);
  sort_indexes_comp(array, &m, &h);
  sort_indexes_comp(array, &l, &m);

  swap_comp(&array[m], &array[high]);

  return array[high];
}

template <typename T>
T median_of_three_of_median_of_three_comp(T array[], int low, int high) {
  if (high - low < 100) {
    return median_of_three_comp(array, low, high);
  } else {
    int offset = (high - low) / 8;

    int a = low;
    int b = low + offset;
    int c = low + offset * 2;
    sort_indexes_comp(array, &a, &b);
    sort_indexes_comp(array, &b, &c);
    sort_indexes_comp(array, &a, &b);

    int d = low + offset * 3;
    int e = low + offset * 4;
    int f = low + offset * 5;
    sort_indexes_comp(array, &d, &e);
    sort_indexes_comp(array, &e, &f);
    sort_indexes_comp(array, &d, &e);
    
    int g = low + offset * 6;
    int h = low + offset * 7;
    int i = high;
    sort_indexes_comp(array, &g, &h);
    sort_indexes_comp(array, &h, &i);
    sort_indexes_comp(array, &g, &h);
    
    sort_indexes_comp(array, &b, &e);
    sort_indexes_comp(array, &e, &h);
    sort_indexes_comp(array, &b, &e);

    swap_comp(&array[e], &array[high]);

    return array[high];
  }
}

template <typename T>
inline int cmov(int condition, T *a, T *b) {
  asm volatile("   cmp       $1, %[condition]\n"
              "    cmovnzl   %[b], %[a]\n"
              : [a] "+r"(a)
              : [condition] "r"(condition), [b] "r"(b)
              : "cc");
  return a;
}

template <typename T>
void insertion_sort_comp(T array[], int low, int high) {
  int i, j;
  T element;
  for (i = low + 1; i <= high; i++) {
    element = array[i];
    j = i - 1;

    while (j >= 0 && element < array[j]) {
      array[j + 1] = array[j];
      j--;
    }
    array[j + 1] = element;
  }
}

template <typename T>
int partition_equal_comp(T array[], int low, int high) {
  T pivot = array[high];
  #if defined(__clang__) || (!defined(__GNUC__) && !defined(__GNUG__))
  int i = low;
  for (int j = low; j < high; j++) {
    int c = pivot == array[j];
    T y = array[i];
    T z = array[j];
    array[i] = c ? z : y;
    array[j] = c ? y : z;
    i += c;
  }
  swap_comp(&array[i], &array[high]);
  #else
  int i = low;
  for (int j = low; j < high; j++) {
    int c = pivot == array[j];
    T y = array[i];
    T z = array[j];
    array[i] = *cmov(c, &z, &y);
    array[j] = *cmov(c, &y, &z);
    i += c;
  }
  swap_comp(&array[i], &array[high]);
  #endif

  return i;
}

template <typename T>
int partition_lomuto_comp(T array[], int low, int high) {
  T pivot = array[high];

  int i = (low - 1);
  for (int j = low; j < high; j++) {
    if (array[j] <= pivot) {
      i++;
      swap_comp(&array[i], &array[j]);
    }
  }
  swap_comp(&array[i + 1], &array[high]);
  return (i + 1);
}

void sort_lomuto_comp(int array[], int low, int high, int leftmost) {
  if (low < high) {
    if (high - low > INSERTION_SORT_THRESH) {
      int pivot = median_of_three_of_median_of_three_comp(array, low, high);

      if (leftmost || array[low - 1] != pivot) {
        int new_pivot_index = partition_lomuto_comp(array, low, high);
        sort_lomuto_comp(array, low, new_pivot_index - 1, leftmost);
        sort_lomuto_comp(array, new_pivot_index + 1, high, false);
      } else {
        int new_pivot_index = partition_equal_comp(array, low, high);
        sort_lomuto_comp(array, new_pivot_index + 1, high, false);
      }
    } else {
      insertion_sort_comp(array, low, high);
    }
  }
}

template <typename T>
int partition_cmov_comp(T array[], int low, int high) {
  T pivot = array[high];
  int i = low;
  #if defined(__clang__) || (!defined(__GNUC__) && !defined(__GNUG__))
  for (int j = low; j < high; j++) {
    int c = array[j] < pivot;
    T y = array[i];
    T z = array[j];
    array[i] = c ? z : y;
    array[j] = c ? y : z;
    i += c;
  }
  swap_comp(&array[i], &array[high]);
  #else
  #if defined(__x86_64__)
  for (int j = low; j < high; j++) {
    int c = array[j] < pivot;
    int y = array[i];
    int z = array[j];
    array[i] = *cmov(c, &z, &y);
    array[j] = *cmov(c, &y, &z);
    i += c;
  }
  swap_comp(&array[i], &array[high]);
  #else
  T x[2];
  for (int j = low; j < high; j++) {
    int c = array[j] < pivot;
    x[0] = array[i];
    x[1] = array[j];
    array[j] = x[1 - c];
    array[i] = x[c];
    i += c;
  }
  swap_comp(&array[i], &array[high]);
  #endif
  #endif
  return (i);
}

template <typename T>
void sort_cmov_comp(T array[], int low, int high, int leftmost) {
  if (low < high) {
    if (high - low > INSERTION_SORT_THRESH) {
      T pivot = median_of_three_of_median_of_three_comp(array, low, high);

      if (leftmost || array[low - 1] != pivot) {
        int new_pivot_index = partition_cmov_comp(array, low, high);
        sort_cmov_comp(array, low, new_pivot_index - 1, leftmost);
        sort_cmov_comp(array, new_pivot_index + 1, high, false);
      } else {
        int new_pivot_index = partition_equal_comp(array, low, high);
        sort_cmov_comp(array, new_pivot_index + 1, high, false);
      }
      
    } else {
      insertion_sort_comp(array, low, high);
    }
  }
}

template <typename T>
void reverse_comp(T array[], int low, int high) {
  for (int index = 0; index < (high - low + 1) / 2; index++) {
    swap_comp(&array[low + index], &array[high - index]);
  }
}

template <typename T>
void sort_quick_optimized_comp(T array[], int low, int high) {
  if (low < high) {
    if (high - low > INSERTION_SORT_THRESH) {
      int size = high - low + 1;
      int sample_size = log2(size) * 2.0;

      int offset = size / sample_size;
      int not_ascending = 0;
      int not_descending = 0;

      for (int index = low; index < high; index += offset) {
        not_ascending += array[index] > array[index + 1];
        not_descending += array[index] < array[index + 1];
      }

      if (not_ascending > 1 && not_descending > 1 && not_ascending < sample_size - 1 && not_descending < sample_size - 1) {
        sort_cmov_comp(array, low, high, true);
      } else {
        not_ascending = 0;
        not_descending = 0;
        
        for (int index = low; index < high; index++) {
          not_ascending += array[index] > array[index + 1];
          not_descending += array[index] < array[index + 1];
        }
        
        if (not_ascending == 0) {
        } else
        if (not_ascending < log(size)) {
          insertion_sort_comp(array, low, high);
        } else if (not_ascending < 0.15 * size) {
          sort_lomuto_comp(array, low, high, true);
        } else if (not_descending == 0) {
          reverse_comp(array, low, high);
        } else if (not_descending < log(size)) {
          reverse_comp(array, low, high);
          insertion_sort_comp(array, low, high);
        } else if (not_descending < 0.15 * size) {
          reverse_comp(array, low, high);
          sort_lomuto_comp(array, low, high, true);
        } else {
          sort_cmov_comp(array, low, high, true);
        }
      }
    } else {
      insertion_sort_comp(array, low, high);
    }
  }
}