#include <emmintrin.h> //SSE2
#include <immintrin.h> //AVX, AVX2, AVX-512
#include <nmmintrin.h> //SSE4.2
#include <pmmintrin.h> //SSE3
#include <smmintrin.h> //SSE4.1
#include <xmmintrin.h> //for SSE

#include "const.h"

#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void swap(int *a, int *b);
int median_of_three(int array[], int low, int high);
void sort_quick_optimized(int array[], int low, int high);

int x[2];

typedef int v4si __attribute__((vector_size(8)));

int partition_quick_simd(int array[], int low, int high) {
  __m256i zeros = _mm256_set1_epi32(0);
  int pivot =
      high - low >= 2 ? median_of_three(array, low, high) : array[high]; //
  int64_t i = low;
  int64_t j = low;
  __m256i p = _mm256_set1_epi32(pivot);
  int limit = (high - low) / 8 * 8;
  for (; j < limit;) {

    __m256i values = _mm256_loadu_si256((__m256i *)&array[j]);
    __m256i cs = _mm256_sub_epi32(zeros, _mm256_cmpgt_epi32(p, values));

    int carray[8];
    _mm256_storeu_si256((__m256i_u *)&carray[0], cs);

    for (int k = 0; k < 8; k++) {
      int c = carray[k];
      int y = array[i];
      int z = array[j];
      array[i] = c ? z : y;
      array[j] = c ? y : z;
      // int d = array[i] * c + array[ind] * (1 - c);
      // int f = array[i] * (1 - c) + array[ind] * c;
      // array[ind] = d;
      // array[i] = f;
      // x[0] = array[i];
      // x[1] = array[ind];
      // array[i] = x[c];
      // array[ind] = x[1 - c];
      i += c;
      j++;
    }
  }
  for (; j < high; j++) {
    int c = pivot > array[j];
    int y = array[i];
    int z = array[j];
    array[i] = c ? z : y; // x[c];
    array[j] = c ? y : z; // x[1 - c];
    // x[0] = array[i];
    // x[1] = array[j];
    // array[i] = x[c];
    // array[j] = x[1 - c];
    i += c;
  }
  swap(&array[i], &array[high]);
  return (i);
}

void sort_quick_simd(int array[], int low, int high) {
  // printf("Sorting from %d to %d\n", low, high);
  if (low < high) {
    int pi = partition_quick_simd(array, low, high);
    // printf("New pivot is %d\n", pi);
    sort_quick_simd(array, low, pi - 1);
    sort_quick_simd(array, pi + 1, high);
  }
}
