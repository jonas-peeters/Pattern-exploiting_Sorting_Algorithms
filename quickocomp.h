#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>

#include "const.h"

namespace peqs {

  template<typename iter, typename Compare>
  static inline void sort_indexes_comp(iter *i1, iter *i2, Compare less) {
    iter x = *i1;
    iter y = *i2;
    int c = less(**i1, **i2);
    *i1 = c ? x : y;
    *i2 = c ? y : x;
  }

  template<typename iter, typename Compare, typename t>
  t median_of_three_comp(iter low, iter high, Compare less) {

    if (high - low < 2) {
      return *high;
    }

    iter l = low;
    iter m = low + (high - low) / 2;
    iter h = high;

    sort_indexes_comp(&l, &m, less);
    sort_indexes_comp(&m, &h, less);
    sort_indexes_comp(&l, &m, less);

    std::iter_swap(m, high);

    return *high;
  }

  template<typename iter, typename Compare, typename t>
  t median_of_three_of_median_of_three_comp(iter low, iter high, Compare less) {
    typedef typename std::iterator_traits<iter>::difference_type index;	
    if (high - low < 100) {
      return median_of_three_comp<iter, Compare, t>(low, high, less);
    } else {
      index offset = (high - low) / 8;

      iter a = low;
      iter b = low + offset;
      iter c = low + offset * 2;
      sort_indexes_comp(&a, &b, less);
      sort_indexes_comp(&b, &c, less);
      sort_indexes_comp(&a, &b, less);

      iter d = low + offset * 3;
      iter e = low + offset * 4;
      iter f = low + offset * 5;
      sort_indexes_comp(&d, &e, less);
      sort_indexes_comp(&e, &f, less);
      sort_indexes_comp(&d, &e, less);
      
      iter g = low + offset * 6;
      iter h = low + offset * 7;
      iter i = high;
      sort_indexes_comp(&g, &h, less);
      sort_indexes_comp(&h, &i, less);
      sort_indexes_comp(&g, &h, less);
      
      sort_indexes_comp(&b, &e, less);
      sort_indexes_comp(&e, &h, less);
      sort_indexes_comp(&b, &e, less);

      std::iter_swap(e, high);

      return *high;
    }
  }

  template<typename iter>
  static inline iter cmov_arith(bool condition, iter v1, iter v2) {
    int64_t value1 = (int64_t) v1;
    int64_t value2 = (int64_t) v2;
    
    const int64_t mask = condition ? static_cast<int64_t>(-1) : 0;
    return (iter) ((value1 ^ value2) & mask ^ value2);
  }

  template<typename iter, typename Compare>
  void insertion_sort_end(iter low, iter high, Compare less) {
    using t = typename std::iterator_traits<iter>::value_type;
    iter i, j;
    t element;
    for (i = low + 1; i <= high; i++) {
      element = std::move(*i);
      j = i - 1;

      while (j >= low && less(element, *j)) {
        *(j + 1) = std::move(*j);
        j--;
      }
      *(j + 1) = std::move(element);
    }
  }

  template<typename iter, typename Compare>
  iter partition_equal_comp(iter low, iter high, Compare less) {
    using t = typename std::iterator_traits<iter>::value_type;
    t pivot = std::move(*high);
    #if defined(__clang__) || (!defined(__GNUC__) && !defined(__GNUG__))
    iter i = low;
    for (iter j = low; j < high; j++) {
      int c = !less(pivot, *j);
      t y = std::move(*i);
      t z = std::move(*j);
      *i = std::move(c ? z : y);
      *j = std::move(c ? y : z);
      i += c;
    }
    std::iter_swap(i, high);
    return i;
    #else
    iter i = low - 1;
    for (iter j = low; j < high; j++) {
      if (!less(pivot, *j)) {
        i++;
        std::iter_swap(i, j);
      }
    }
    std::iter_swap(i + 1, high);
    return (i + 1);
    #endif
  }

  template<typename iter, typename Compare>
  iter partition_lomuto_comp(iter low, iter high, Compare less) {
    using t = typename std::iterator_traits<iter>::value_type;
    t pivot = std::move(*high);

    iter i = low - 1;
    for (iter j = low; j < high; j++) {
      if (less(*j, pivot)) {
        i++;
        std::iter_swap(i, j);
      }
    }
    std::iter_swap(i + 1, high);
    return (i + 1);
  }

  template<typename iter, typename Compare>
  void sort_lomuto_comp(iter low, iter high, int leftmost, Compare less) {
    using t = typename std::iterator_traits<iter>::value_type;
    if (low < high) {
      if (high - low > INSERTION_SORT_THRESH) {
        t pivot = median_of_three_of_median_of_three_comp<iter, Compare, t>(low, high, less);

        if (leftmost || less(*(low - 1), pivot)) {
          iter new_pivot_index = partition_lomuto_comp(low, high, less);
          sort_lomuto_comp(low, new_pivot_index - 1, leftmost, less);
          sort_lomuto_comp(new_pivot_index + 1, high, false, less);
        } else {
          iter new_pivot_index = partition_equal_comp(low, high, less);
          sort_lomuto_comp(new_pivot_index + 1, high, false, less);
        }
      } else {
        insertion_sort_end(low, high, less);
      }
    }
  }
  

  template<typename iter, typename Compare>
  iter partition_cmov_comp(iter low, iter high, Compare less) {
    using t = typename std::iterator_traits<iter>::value_type;
    #if defined(__clang__) || (!defined(__GNUC__) && !defined(__GNUG__))
    t pivot = *high;
    iter i = low;
    for (iter j = low; j < high; j++) {
      int c = less(*j, pivot);
      t y = std::move(*i);
      t z = std::move(*j);
      *i = std::move(c ? z : y);
      *j = std::move(c ? y : z);
      i += c;
    }
    std::iter_swap(i, high);
    return (i);
    #else
    std::iter_swap(low, high);
    return pdqsort_detail::partition_right_branchless(low, high + 1, less).first;
    #endif
  }

  template<typename iter, typename Compare>
  void sort_cmov_comp(iter low, iter high, int leftmost, Compare less) {
    using t = typename std::iterator_traits<iter>::value_type;
    if (low < high) {
      if (high - low > INSERTION_SORT_THRESH) {
        t pivot = median_of_three_of_median_of_three_comp<iter, Compare, t>(low, high, less);

        if (leftmost || less(*(low - 1), pivot)) {
          iter new_pivot_index = partition_cmov_comp(low, high, less);
          sort_cmov_comp(low, new_pivot_index - 1, leftmost, less);
          sort_cmov_comp(new_pivot_index + 1, high, false, less);
        } else {
          iter new_pivot_index = partition_equal_comp(low, high, less);
          sort_cmov_comp(new_pivot_index + 1, high, false, less);
        }
        
      } else {
        insertion_sort_end(low, high, less);
      }
    }
  }

  template<typename iter, typename Compare>
  void limited_insertion_sort(iter low, iter high, Compare less) {
    using t = typename std::iterator_traits<iter>::value_type;
    iter i, j;
    t element;
    int limit = INSERTION_SORT_THRESH;
    for (i = low + 1; i <= high; i++) {
      element = std::move(*i);
      j = i - 1;

      while (j >= low && less(element, *j)) {
        *(j + 1) = std::move(*j);
        j--;
      }
      *(j + 1) = std::move(element);
      
      if (j < i + 1) {
        limit--;
        if (limit == 0) {
          sort_lomuto_comp(low, high, true, less);
          return;
        }
      }
    }
  }

  template<typename iter>
  static inline void reverse_comp(iter low, iter high) {
    for (iter index = low; index < low + (high - low + 1) / 2; index++) {
      std::iter_swap(index, high - index + low);
    }
  }

  template<typename iter, typename Compare>
  void sort(iter low, iter high, Compare less) {
    if (low < high) {
      if (high - low > INSERTION_SORT_THRESH) {
        int size = high - low + 1;
        int sample_size = log2(size) * 2.0;

        int offset = size / sample_size;
        int not_ascending = 0;
        int not_descending = 0;

        for (iter index = low; index < high; index += offset) {
          not_ascending += less(*(index + 1), *index);
          not_descending += less(*index, *(index + 1));
        }

        if (not_ascending > 1 && not_descending > 1 && not_ascending < sample_size - 1 && not_descending < sample_size - 1) {
          sort_cmov_comp(low, high, true, less);
        } else {
          not_ascending = 0;
          not_descending = 0;
          
          for (iter index = low; index < high; index++) {
            not_ascending += less(*(index + 1), *index);
            not_descending += less(*index, *(index + 1));
          }
          
          if (not_ascending == 0) {
          } else
          if (not_ascending < log(size)) {
            limited_insertion_sort(low, high, less);
          } else if (not_ascending < 0.15 * size) {
            sort_lomuto_comp(low, high, true, less);
          } else if (not_descending == 0) {
            reverse_comp(low, high);
          } else if (not_descending < log(size)) {
            reverse_comp(low, high);
            limited_insertion_sort(low, high, less);
          } else if (not_descending < 0.15 * size) {
            reverse_comp(low, high);
            sort_lomuto_comp(low, high, true, less);
          } else {
            sort_cmov_comp(low, high, true, less);
          }
        }
      } else {
        insertion_sort_end(low, high, less);
      }
    }
  }
}