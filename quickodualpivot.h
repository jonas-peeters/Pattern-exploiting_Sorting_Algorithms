#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#include "const.h"

#include <emmintrin.h> //SSE2
#include <immintrin.h> //AVX, AVX2, AVX-512
#include <nmmintrin.h> //SSE4.2
#include <pmmintrin.h> //SSE3
#include <smmintrin.h> //SSE4.1
#include <xmmintrin.h> //for SSE

void swap(int *a, int *b);
int median_of_three(int array[], int low, int high);
void insertionSortOptimized(int array[], int n);
void sort_quick_optimized(int array[], int low, int high);
int x[2];

void partition_quick_optimized_dual(int array[], int low, int high, int *plow,
                                    int *phigh) {
  int c, y, z;
  y = array[low];
  z = array[high];
  c = y < z;
  int pivot_low = c ? y : z;
  int pivot_high = c ? z : y;
  array[low] = pivot_low;
  array[high] = pivot_high;

  // printf("Pivots: ... %d ... %d ... \n", pivot_low, pivot_high);
  // printf("Before ");
  // for (int64_t pindex = low; pindex <= high; pindex++) {
  //   printf("%d ", array[pindex]);
  // }
  // printf("\n");

  int64_t j = low + 1;
  int64_t k = j;
  int64_t g = high - 1;

  while (j <= g) {
    c = pivot_low > array[j];
    y = array[k];
    z = array[j];
    array[k] = c ? z : y; // Done using cmovgl
    array[j] = c ? y : z; // Done using cmovgl
    // if (c) {
    //   printf("%d is smaller than %d and was swapped with %d to index %d\n",
    //   z,
    //          pivot_low, y, k);
    // }
    k += c;

    c = pivot_high < array[j];
    y = array[g];
    z = array[j];
    array[g] = c ? z : y; // Done using cmovgl
    array[j] = c ? y : z; // Done using cmovgl
    // if (c) {
    //   printf("%d is larger than %d and was swapped with %d to index %d\n", z,
    //          pivot_high, y, g);
    // }
    g -= c;
    j -= c;

    j++;
  }
  k--;
  g++;

  swap(&array[k], &array[low]);
  swap(&array[g], &array[high]);
  *plow = k;
  *phigh = g;

  // printf("After ");
  // for (int64_t pindex = low; pindex <= high; pindex++) {
  //   printf("%d ", array[pindex]);
  // }
  // printf("\n");
}

void sort_quick_optimized_dual(int array[], int low, int high) {
  if (low < high) {
    if (high - low > 1000) {
      int pivot_low, pivot_high;
      partition_quick_optimized_dual(array, low, high, &pivot_low, &pivot_high);
      sort_quick_optimized_dual(array, low, pivot_low - 1);
      sort_quick_optimized_dual(array, pivot_low + 1, pivot_high - 1);
      sort_quick_optimized_dual(array, pivot_high + 1, high);
    } else {
      sort_quick_optimized(array, low, high);
    }
  }
}
