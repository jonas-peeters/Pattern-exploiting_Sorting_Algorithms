#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>

#include "const.h"

void swap(int *a, int *b);
int median_of_three_auto_finish(int array[], int low, int high, int *done);
int median_of_three_of_median_of_three(int array[], int low, int high);
void sort_quick_hoare(int array[], int low, int high);

void reverse(int array[], int low, int high) {
  for (int index = 0; index < (high - low + 1) / 2; index++) {
    swap(&array[low + index], &array[high - index]);
  }
}

struct PartitionReturnValue {
  int pivot_index;
  int left_not_ascending;
  int left_not_descending;
  int right_not_ascending;
  int right_not_descending;
};

int partition_cmov(int array[], int low, int high) {
  int pivot = array[high];
  int i = low;
  for (int j = low; j < high; j++) {
    int c = pivot > array[j];
    int y = array[i];
    int z = array[j];
    array[i] = c ? z : y; // Done using CMOVG
    array[j] = c ? y : z; // Done using CMOVG
    i += c;
  }
  swap(&array[i], &array[high]);

  return i;
}

int partition_hoare(int array[], int low, int high) {
  int pivot = array[high];

  int i = low - 1;
  int j = high;
  while (true) {
    do {i++;} while (array[i] < pivot);
    do {j--;} while (array[j] >= pivot);
    if (i >= j) {
      swap(&array[++j], &array[high]);
      return j;
    }
    swap(&array[i], &array[j]);
  }
}

int partition_equal(int array[], int low, int high) {
  int pivot = array[high];
  int i = low;

  for (int j = low; j < high; j++) {
    int c = pivot == array[j];
    int y = array[i];
    int z = array[j];
    array[i] = c ? z : y; // Done using CMOVG
    array[j] = c ? y : z; // Done using CMOVG
    i += c;
  }
  swap(&array[i], &array[high]);

  return i;
}



void sort_quick_optimized_swap_cmov(int array[], int low, int high);

void sort_quick_optimized_recurse(int array[], int low, int high, int leftmost) {
  //printf("Sort from %d to %d\n", low, high);
  if (low < high) {
    if (high - low < INSERTION_SORT_THRESH) {
      insertionSortStd(array, low, high);
      return;
    }
  
    int sorted = 0;
    int current_pivot_index = median_of_three_of_median_of_three_opti(array, low, high, &sorted);
    int pivot = array[current_pivot_index];
    int next_pivot_index;

    if (!leftmost && pivot == array[low - 1]) {
      swap(&array[current_pivot_index], &array[high]);
      next_pivot_index = partition_equal(array, low, high);
      sort_quick_optimized_recurse(array, next_pivot_index + 1, high, false);
      return;
    }
    int size = high - low + 1;

    //printf("Sorted %d\n", sorted);

    if (sorted > 1 && sorted < 5) {
      swap(&array[current_pivot_index], &array[high]);
      next_pivot_index = partition_cmov(array, low, high);
      sort_quick_optimized_recurse(array, low, next_pivot_index - 1, leftmost);
      sort_quick_optimized_recurse(array, next_pivot_index + 1, high, false);
      return;
    }

    int not_ascending = 0;
    int not_descending = 0;
    
    for (int index = low; index < high; index++) {
      not_ascending += array[index] > array[index + 1];
      not_descending += array[index] < array[index + 1];
    }

    //printf("Not ascending %d, not descending %d\n", not_ascending, not_descending);
  
    if (not_ascending == 0) {
      return;
    }
    if (size < 1000 && not_ascending < log2(size)) {
      insertionSortStd(array, low, high);
      return;
    }
    if (not_descending == 0) {
      reverse(array, low, high);
      return;
    }
    if (size < 1000 && not_descending < log2(size)) {
      reverse(array, low, high);
      insertionSortStd(array, low, high);
      return;
    }

    swap(&array[current_pivot_index], &array[high]);

    if (not_ascending < 0.15 * size) {
      //printf("Hoare\n");
      next_pivot_index = partition_hoare(array, low, high);
    } else if (not_descending < 0.15 * size) {
      //printf("Reverse hoare\n");
      reverse(array, low, high - 1);
      next_pivot_index = partition_hoare(array, low, high);
    } else {
      //printf("CMOV\n");
      next_pivot_index = partition_cmov(array, low, high);
    }
    sort_quick_optimized_recurse(array, low, next_pivot_index - 1, leftmost);
    sort_quick_optimized_recurse(array, next_pivot_index + 1, high, false);
    
  }
}

void sort_quick_optimized(int array[], int low, int high) {
  sort_quick_optimized_recurse(array, low, high, true);
  //if (low < high) {
  //  if (high - low > INSERTION_SORT_THRESH) {
  //    int size = high - low + 1;
  //    int sample_size = log2(size);
  //
  //    int offset = size / sample_size;
  //    int not_ascending = 0;
  //    int not_descending = 0;
  //
  //    for (int index = low; index < high; index += offset) {
  //      not_ascending += array[index] > array[index + 1];
  //      not_descending += array[index] < array[index + 1];
  //    }
  //
  //    if (not_ascending > 1 && not_descending > 1 && not_ascending < sample_size - 1 && not_descending < sample_size - 1) {
  //      int pivot_index = partition_cmov(array, low, high);
  //      sort_quick_optimized_recurse(array, low, pivot_index - 1, true);
  //      sort_quick_optimized_recurse(array, pivot_index + 1, high, false);
  //    } else {
  //      not_ascending = 0;
  //      not_descending = 0;
  //      
  //      for (int index = low; index < high; index++) {
  //        not_ascending += array[index] > array[index + 1];
  //        not_descending += array[index] < array[index + 1];
  //      }
  //      
  //      sort_quick_optimized_recurse(array, low, high, true);
  //    }
  //  } else {
  //    insertionSortStd(array, low, high);
  //  }
  //}
}