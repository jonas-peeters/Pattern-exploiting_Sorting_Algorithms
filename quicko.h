#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>

#include "const.h"

void swap(int *a, int *b);
int median_of_three_of_median_of_three(int array[], int low, int high);

int partition_equal(int array[], int low, int high) {
  int pivot = array[high];
  #if defined(__clang__) || (!defined(__GNUC__) && !defined(__GNUG__))
  int i = low;
  for (int j = low; j < high; j++) {
    int c = pivot == array[j];
    int y = array[i];
    int z = array[j];
    array[i] = c ? z : y;
    array[j] = c ? y : z;
    i += c;
  }
  swap(&array[i], &array[high]);
  #else
  int64_t i = low;
  int64_t h = high;
  asm volatile("    movq    %[i], %%r12\n"
              "1:\n"
              "\n" // Loop start
              "    movl     (%[array],%%r12,4), %%r8d\n"
              "    movl     (%[array],%[i],4), %%r9d\n"
              "    xorq      %%r10, %%r10\n"
              "    cmp      %[pivot], %%r8d\n"
              "    sete     %%r10b\n"
              "    movl     %%r9d, %%r11d\n"
              "    cmovel   %%r8d, %%r11d\n"
              "    movl     %%r11d, (%[array],%[i],4)\n"
              "    cmovel   %%r9d, %%r8d\n"
              "    movl     %%r8d, (%[array],%%r12,4)\n"
              "    addq     %%r10, %[i]\n"
              "\n" // Loop end
              "    incq     %%r12\n"
              "    cmp      %%r12, %[high]\n"
              "    jne      1b\n"
              "\n" // Swap pivot back
               "    movl     (%[array],%[i],4), %%r9d\n"
               "    movl     (%[array],%[high],4), %%r8d\n"
               "    movl     %%r9d, (%[array],%[high],4)\n"
               "    movl     %%r8d, (%[array],%[i],4)\n"
              : [i] "+r"(i)
              : [array] "r"(array), [pivot] "r"(pivot), [high] "r"(h)
              : "cc", "r8", "r9", "r10", "r11", "r12");
  #endif

  return i;
}

int partition_lomuto(int array[], int low, int high) {
  int pivot = array[high];

  int i = (low - 1);
  for (int j = low; j < high; j++) {
    if (array[j] <= pivot) {
      i++;
      swap(&array[i], &array[j]);
    }
  }
  swap(&array[i + 1], &array[high]);
  return (i + 1);
}

void sort_lomuto(int array[], int low, int high, int leftmost) {
  if (low < high) {
    if (high - low > INSERTION_SORT_THRESH) {
      int pivot = median_of_three_of_median_of_three(array, low, high);

      if (leftmost || array[low - 1] != pivot) {
        int new_pivot_index = partition_lomuto(array, low, high);
        sort_lomuto(array, low, new_pivot_index - 1, leftmost);
        sort_lomuto(array, new_pivot_index + 1, high, false);
      } else {
        int new_pivot_index = partition_equal(array, low, high);
        sort_lomuto(array, new_pivot_index + 1, high, false);
      }
    } else {
      insertionSort(array + low, high - low + 1);
    }
  }
}

int partition_cmov(int array[], int low, int high) {
  int pivot = array[high];
  #if defined(__clang__) || (!defined(__GNUC__) && !defined(__GNUG__))
  int i = low;
  for (int j = low; j < high; j++) {
    int c = pivot > array[j];
    int y = array[i];
    int z = array[j];
    array[i] = c ? z : y;
    array[j] = c ? y : z;
    i += c;
  }
  swap(&array[i], &array[high]);
  #else
  #if defined(__x86_64__)
  int64_t i = low;
  int64_t h = high;
  asm volatile("    movq    %[i], %%r12\n"
              "1:\n"
              "\n" // Loop start
              "    movl     (%[array],%%r12,4), %%r8d\n"
              "    movl     (%[array],%[i],4), %%r9d\n"
              "    xorq      %%r10, %%r10\n"
              "    cmp      %[pivot], %%r8d\n"
              "    setl     %%r10b\n"
              "    movl     %%r9d, %%r11d\n"
              "    cmovll   %%r8d, %%r11d\n"
              "    movl     %%r11d, (%[array],%[i],4)\n"
              "    cmovll   %%r9d, %%r8d\n"
              "    movl     %%r8d, (%[array],%%r12,4)\n"
              "    addq     %%r10, %[i]\n"
              "\n" // Loop end
              "    incq     %%r12\n"
              "    cmp      %%r12, %[high]\n"
              "    jne      1b\n"
              "\n" // Swap pivot back
               "    movl     (%[array],%[i],4), %%r9d\n"
               "    movl     (%[array],%[high],4), %%r8d\n"
               "    movl     %%r9d, (%[array],%[high],4)\n"
               "    movl     %%r8d, (%[array],%[i],4)\n"
              : [i] "+r"(i)
              : [array] "r"(array), [pivot] "r"(pivot), [high] "r"(h)
              : "cc", "r8", "r9", "r10", "r11", "r12");
  #else
  int i = low;
  for (int j = low; j < high; j++) {
    int c = pivot > array[j];
    x[0] = array[i];
    x[1] = array[j];
    array[j] = x[1 - c];
    array[i] = x[c];
    i += c;
  }
  swap(&array[i], &array[high]);
  #endif
  #endif
  return (i);
}

void sort_cmov(int array[], int low, int high, int leftmost) {
  if (low < high) {
    if (high - low > INSERTION_SORT_THRESH) {
      int pivot = median_of_three_of_median_of_three(array, low, high);

      if (leftmost || array[low - 1] != pivot) {
        int new_pivot_index = partition_cmov(array, low, high);
        sort_cmov(array, low, new_pivot_index - 1, leftmost);
        sort_cmov(array, new_pivot_index + 1, high, false);
      } else {
        int new_pivot_index = partition_equal(array, low, high);
        sort_cmov(array, new_pivot_index + 1, high, false);
      }
      
    } else {
      insertionSortOptimized(array + low, high - low + 1);
    }
  }
}

void insertion_sort(int array[], int low, int high) {
  int i, j;
  int element;
  for (i = low + 1; i <= high; i++) {
    element = array[i];
    j = i - 1;

    while (j >= 0 && array[j] > element) {
      array[j + 1] = array[j];
      j--;
    }
    array[j + 1] = element;
  }
}


void reverse(int array[], int low, int high) {
  for (int index = 0; index < (high - low + 1) / 2; index++) {
    swap(&array[low + index], &array[high - index]);
  }
}

void sort_quick_optimized(int array[], int low, int high) {
  if (low < high) {
    if (high - low > INSERTION_SORT_THRESH) {
      int size = high - low + 1;
      int sample_size = log2(size) * 2.0;

      int offset = size / sample_size;
      int not_ascending = 0;
      int not_descending = 0;

      for (int index = low; index < high; index += offset) {
        not_ascending += array[index] > array[index + 1];
        not_descending += array[index] < array[index + 1];
      }

      if (not_ascending > 1 && not_descending > 1 && not_ascending < sample_size - 1 && not_descending < sample_size - 1) {
        sort_cmov(array, low, high, true);
      } else {
        not_ascending = 0;
        not_descending = 0;
        
        for (int index = low; index < high; index++) {
          not_ascending += array[index] > array[index + 1];
          not_descending += array[index] < array[index + 1];
        }
        
        if (not_ascending == 0) {
        } else
        if (not_ascending < log(size)) {
          insertion_sort(array, low, high);
        } else if (not_ascending < 0.15 * size) {
          sort_lomuto(array, low, high, true);
        } else if (not_descending == 0) {
          reverse(array, low, high);
        } else if (not_descending < log(size)) {
          reverse(array, low, high);
          insertion_sort(array, low, high);
        } else if (not_descending < 0.15 * size) {
          reverse(array, low, high);
          sort_lomuto(array, low, high, true);
        } else {
          sort_cmov(array, low, high, true);
        }
      }
    } else {
      insertionSortStd(array, low, high);
    }
  }
}