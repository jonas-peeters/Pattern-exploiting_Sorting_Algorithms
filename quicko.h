#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

const int INSERTION_SORT_THRESH_O = 0;

void swap(int *a, int *b);
int median_of_three(int array[], int low, int high);
int x[2];

int partition_quick_optimized(int array[], int low, int high) {
  int pivot = high - low >= 2
                  ? median_of_three(array, low, high)
                  : array[high]; // median_of_three(array, low, high);
  int64_t i = low;
  for (int64_t j = low; j < high; j++) {
    int c = pivot > array[j]; //(((pivot - array[j]) >> 31) + 1);//
    // int y = array[i];
    // int z = array[j];
    // array[i] = c ? z : y; // Done using cmovgl
    // array[j] = c ? y : z; // Done using cmovgl
    // int y = array[j] * c + (1 - c) * array[i];
    // int z = array[i] + array[j] - y;
    // array[i] = y;
    // array[j] = z;
    x[0] = array[i];
    x[1] = array[j];
    array[j] = x[1 - c];
    array[i] = x[c];
    i += c;
  }
  swap(&array[i], &array[high]);
  return (i);
}

void sort_quick_optimized(int array[], int low, int high) {
  if (low < high) {
    if (high - low > INSERTION_SORT_THRESH_O) {
      int pi = partition_quick_optimized(array, low, high);
      sort_quick_optimized(array, low, pi - 1);
      sort_quick_optimized(array, pi + 1, high);
    } else {
      insertionSortOptimized(array + low, high - low + 1);
    }
  }
}
