#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>

#include "const.h"

void swap(int *a, int *b);
int median_of_three_auto_finish(int array[], int64_t low, int64_t high, int *done);
int median_of_three_of_median_of_three(int array[], int64_t low, int64_t high);
void sort_quick_hoare(int array[], int64_t low, int64_t high);

void reverse(int array[], int64_t low, int64_t high) {
  for (int64_t index = 0; index < (high - low + 1) / 2; index++) {
    swap(&array[low + index], &array[high - index]);
  }
}

int partition_quick_optimized(int array[], int64_t *l, int64_t *h, int *done) { 

  int64_t low = *l;
  int64_t high = *h;

  int pivot = median_of_three_of_median_of_three(array, low, high);

  //high--;
  //
  //while (array[low] < pivot && low < high) {
  //  low++;
  //}
  //while (array[high] > pivot && low < high) {
  //  high--;
  //}
  //
  //if (high == low) {
  //  swap(&array[high], &array[*h]);
  //  return high;
  //}

  //low = *l;
  //high = *h;


  //int size = high - low + 1;
  //int startL = low;
  //int startR = high - 1;

  //while (array[startL] <= pivot && startL < startR) {
  //  startL++;
  //}
  //while (array[startR] > pivot && low < startR) {
  //  startR--;
  //}
  //if (startL == startR) {
  //  *done = true;
  //  return low;
  //}

  int i = low;

  //for (; j < (low + high) / 2; j++) {
  //  int c = pivot > array[j];
  //  int y = array[i];
  //  int z = array[j];
  //  array[i] = c ? z : y;
  //  array[j] = c ? y : z;
  //  i += c;
  //}

  //if (i == j - 1) {
  //  sort_quick_hoare(array, low, high);
  //  *done = true;
  //  return i;
  //}

  for (int64_t j = low; j <= high; j++) {
    int c = pivot > array[j];
    int y = array[i];
    int z = array[j];
    array[i] = c ? z : y;
    array[j] = c ? y : z;
    i += c;
  }

  swap(&array[i], &array[*h]);

  //if (ascending > 0.85 * size) {
  //  sort_quick_hoare(array, low, high);
  //  *done = true;
  //}
  // else if (descending > 0.85 * size) {
   // sort_quick_hoare(array, low, high);
   // *done = true;
  //}

  return i;
}

void sort_quick_optimized(int array[], int64_t low, int64_t high);

void sort_quick_optimized_h(int array[], int64_t low, int64_t high) {
  if (low < high) {
    if (high - low > INSERTION_SORT_THRESH) {
      //if (array[low] == array[high] && array[low] == array[(low + high) / 2]) {
      //  int not_equal = 0;
      //  for (int i = low + 1; i < high; i++) {
      //    not_equal += array[i] != array[low];
      //    if (not_equal > (high - low) / 5) {
      //      break;
      //    }
      //  }
      //  if (not_equal != 0) {
      //    if (not_equal < (high - low) / 5) {
      //      insertionSortStd(array, low, high);
      //    } else {
      //      int done = false;
      //      int pivot_index = partition_quick_optimized(array, &low, &high, &done);
      //      if (high - low > 2 && !done) {
      //        sort_quick_optimized(array, low, pivot_index - 1);
      //        sort_quick_optimized(array, pivot_index + 1, high);
      //      }
      //    }
      //  }
      //} else {
        int done = false;
        int pivot_index = partition_quick_optimized(array, &low, &high, &done);
        if (high - low > 2 && !done) {
          sort_quick_optimized(array, low, pivot_index - 1);
          sort_quick_optimized(array, pivot_index + 1, high);
        }
      //}
    } else {
      insertionSortStd(array, low, high);
    }
  }
}

void sort_quick_optimized_swap_cmov(int array[], int64_t low, int64_t high);

void sort_quick_optimized(int array[], int64_t low, int64_t high) {
  if (low < high) {
    if (high - low > INSERTION_SORT_THRESH) {
      if (high - low < 100) {
        //int done = false;
        //int pivot_index = partition_quick_optimized(array, &low, &high, &done);
        //if (high - low > 2 && !done) {
        //  sort_quick_optimized(array, low, pivot_index - 1);
        //  sort_quick_optimized(array, pivot_index + 1, high);
        //}
        sort_quick_optimized_swap_cmov(array, low, high);
        return;
      }

      int size = high - low + 1;
      int sample_size = log2(size);

      int offset = size / sample_size;
      int not_ascending = 0;
      int not_descending = 0;

      for (int64_t index = low; index < high; index += offset) {
        not_ascending += array[index] > array[index + 1];
        not_descending += array[index] < array[index + 1];
      }

      if (not_ascending > 0 && not_descending > 0 && not_ascending < sample_size && not_descending < sample_size) {
        //int done = false;
        //int pivot_index = partition_quick_optimized(array, &low, &high, &done);
        //if (high - low > 2 && !done) {
        //  sort_quick_optimized(array, low, pivot_index - 1);
        //  sort_quick_optimized(array, pivot_index + 1, high);
        //}
        sort_quick_optimized_swap_cmov(array, low, high);
      } else {
        not_ascending = 0;
        not_descending = 0;
        
        for (int64_t index = low; index < high; index++) {
          not_ascending += array[index] > array[index + 1];
          not_descending += array[index] < array[index + 1];
        }
        
        if (not_ascending == 0) {
        } else
        if (not_ascending < log2(size)) {
          insertionSortStd(array, low, high);
        } else if (not_ascending < 0.15 * size) {
          sort_quick_hoare(array, low, high);
        } else if (not_descending == 0) {
          reverse(array, low, high);
        } else if (not_descending < log2(size)) {
          reverse(array, low, high);
          insertionSortStd(array, low, high);
        } else if (not_descending < 0.15 * size) {
          reverse(array, low, high);
          sort_quick_hoare(array, low, high);
        } else {
          //int done = false;
          //int pivot_index = partition_quick_optimized(array, &low, &high, &done);
          //if (high - low > 2 && !done) {
          //  sort_quick_optimized(array, low, pivot_index - 1);
          //  sort_quick_optimized(array, pivot_index + 1, high);
          //}
          sort_quick_optimized_swap_cmov(array, low, high);
        }
      }
    } else {
      insertionSortStd(array, low, high);
    }
  }
}