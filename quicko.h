#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>

#include "const.h"

void swap(int *a, int *b);
inline int median_of_three_auto_finish(int array[], int64_t low, int64_t high, int *done);
int median_of_three_of_median_of_three(int array[], int64_t low, int64_t high);
int x[2];

void reverse(int array[], int64_t low, int64_t high) {
  for (int64_t index = 0; index < high - low; index++) {
    swap(&array[low + index], &array[high - index]);
  }
}

int64_t partition_quick_optimized(int array[], int64_t low, int64_t high, int *done) {
  int pivot = median_of_three_of_median_of_three(array, low, high);

  int64_t i = low;
  int64_t checkup_value = low + (high - low) / 5;
  for (int64_t j = low; j < high; j++) {
    int c = pivot > array[j];
    int y = array[i];
    int z = array[j];
    array[i] = c ? z : y;
    array[j] = c ? y : z;
    i += c;
    if (j == checkup_value) {
      if (i == low) {
        // So far 0% of values have been smaller than the pivot
        int descending = 0;
        for (int64_t index = low; index < high - 1; index++) {
          descending += array[index] >= array[index + 1];
        }
    
        if (descending > (high - low) * 0.8) {
          //reverse(array, low, high);
          if (descending != high - low) {
            insertionSortStd(array, low, high);
          }
          *done = true;
          return 0;
        }
      }
    }
    //  } else if (i < low + (checkup_value - low) / 10) {
    //    // So far less then 10% of values have been smaller than the pivot
    //    printf("\ni < low + (checkup_value - low) / 10\n");
    //    reverse(array, low, high);
    //    i--;
    //    for (; j < high; j++) {
    //      if (array[j] <= pivot) {
    //        i++;
    //        swap(&array[i], &array[j]);
    //      }
    //    }
    //    i++;
    //    break;
    //  } else if (i > low + (checkup_value - low) * 0.9) {
    //    // So far more than 90% of values have been smaller than the pivot
    //    printf("\ni > low + (checkup_value - low) * 0.9\n");
    //    i--;
    //    for (; j < high; j++) {
    //      if (array[j] <= pivot) {
    //        i++;
    //        swap(&array[i], &array[j]);
    //      }
    //    }
    //    i++;
    //    break;
    //  } else if (i == j) {
    //    // So far 100% of values have been smaller than the pivot
    //    printf("\ni == j\n");
    //    int ascending = 0;
    //    for (int64_t index = low; index < high - 1; index++) {
    //      ascending += array[index] <= array[index + 1];
    //    }
    //    if (ascending > (high - low) * 0.8) {
    //      if (ascending != high - low) {
    //        insertionSortStdOpt(array, low, high);
    //      }
    //      break;
    //    }
    //  }
    //}
  }
  swap(&array[i], &array[high]);
  return (i);
}

void sort_quick_optimized(int array[], int64_t low, int64_t high) {
  if (low < high) {
    if (high - low > INSERTION_SORT_THRESH) {
      if (array[low] == array[high] && array[low] == array[(low + high) / 2]) {
        int not_equal = 0;
        for (int i = low + 1; i < high; i++) {
          if (array[i] != array[low]) {
            not_equal++;
          }
          if (not_equal > (high - low) / 5) {
            break;
          }
        }
        if (not_equal != 0 && not_equal < (high - low) / 5) {
          insertionSortStd(array, low, high);
        } else if (not_equal != 0) {
          int done = false;
          int64_t pi = partition_quick_optimized(array, low, high, &done);
          if (high - low > 2 && !done) {
            sort_quick_optimized(array, low, pi - 1);
            sort_quick_optimized(array, pi + 1, high);
          }
        }
      } else {
          int done = false;
        int64_t pi = partition_quick_optimized(array, low, high, &done);
        if (high - low > 2 && !done) {
          sort_quick_optimized(array, low, pi - 1);
          sort_quick_optimized(array, pi + 1, high);
        }
      }
    } else {
      insertionSortStd(array, low, high);
    }
  }
}
