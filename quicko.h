#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>

#include "const.h"

void swap(int *a, int *b);
int median_of_three_auto_finish(int array[], int low, int high, int *done);
int median_of_three_of_median_of_three(int array[], int low, int high);


int partition_lomuto(int array[], int low, int high) {
  int pivot = median_of_three_of_median_of_three(array, low, high); //

  int i = (low - 1);
  for (int j = low; j < high; j++) {
    if (array[j] <= pivot) {
      i++;
      swap(&array[i], &array[j]);
    }
  }
  swap(&array[i + 1], &array[high]);
  return (i + 1);
}

void sort_lomuto(int array[], int low, int high) {
  if (low < high) {
    if (high - low > 30) {
      int pi = partition_lomuto(array, low, high);
      sort_lomuto(array, low, pi - 1);
      sort_lomuto(array, pi + 1, high);
    } else {
      insertionSort(array + low, high - low + 1);
    }
  }
}

int partition_cmov(int array[], int low, int high) {
  int pivot = median_of_three_of_median_of_three(array, low, high);

  int i = low;
  for (int j = low; j < high; j++) {
    int c = pivot > array[j];
    int y = array[i];
    int z = array[j];
    array[i] = c ? z : y; // Done using CMOVgl
    array[j] = c ? y : z; // Done using CMOVgl
    i += c;
  }
  swap(&array[i], &array[high]);
  return (i);
}

void sort_cmov(int array[], int low, int high) {
  if (low < high) {
    if (high - low > INSERTION_SORT_THRESH) {
      int pi = partition_cmov(array, low, high);
      sort_cmov(array, low, pi - 1);
      sort_cmov(array, pi + 1, high);
    } else {
      insertionSortOptimized(array + low, high - low + 1);
    }
  }
}


void reverse(int array[], int low, int high) {
  for (int index = 0; index < (high - low + 1) / 2; index++) {
    swap(&array[low + index], &array[high - index]);
  }
}

void sort_quick_optimized(int array[], int low, int high) {
  if (low < high) {
    if (high - low > INSERTION_SORT_THRESH) {
      //if (high - low < 100) {
      //  sort_cmov(array, low, high);
      //  return;
      //}

      int size = high - low + 1;
      int sample_size = log2(size);

      int offset = size / sample_size;
      int not_ascending = 0;
      int not_descending = 0;

      for (int index = low; index < high; index += offset) {
        not_ascending += array[index] > array[index + 1];
        not_descending += array[index] < array[index + 1];
      }

      if (not_ascending > 1 && not_descending > 1 && not_ascending < sample_size - 1 && not_descending < sample_size - 1) {
        sort_cmov(array, low, high);
      } else {
        not_ascending = 0;
        not_descending = 0;
        
        for (int index = low; index < high; index++) {
          not_ascending += array[index] > array[index + 1];
          not_descending += array[index] < array[index + 1];
        }
        
        if (not_ascending == 0) {
        } else
        if (not_ascending < log2(size)) {
          insertionSortStd(array, low, high);
        } else if (not_ascending < 0.15 * size) {
          sort_lomuto(array, low, high);
        } else if (not_descending == 0) {
          reverse(array, low, high);
        } else if (not_descending < log2(size)) {
          reverse(array, low, high);
          insertionSortStd(array, low, high);
        } else if (not_descending < 0.15 * size) {
          reverse(array, low, high);
          sort_lomuto(array, low, high);
        } else {
          sort_cmov(array, low, high);
        }
      }
    } else {
      insertionSortStd(array, low, high);
    }
  }
}