#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#include "const.h"

#include <emmintrin.h> //SSE2
#include <immintrin.h> //AVX, AVX2, AVX-512
#include <nmmintrin.h> //SSE4.2
#include <pmmintrin.h> //SSE3
#include <smmintrin.h> //SSE4.1
#include <xmmintrin.h> //for SSE

void swap(int *a, int *b);
int median_of_three_of_median_of_three_auto_finish(int array[], int64_t low, int64_t high, int *done);
void insertionSortOptimized(int array[], int n);

int64_t partition_quick_optimized_swap_cmov(int array[], int64_t low, int64_t high) {
  int done = 0;
  int pivot = median_of_three_of_median_of_three_auto_finish(array, low, high, &done);
  if (done) {
    return (low + high) / 2;
  }
  int64_t i = low;
  for (int64_t j = low; j < high; j++) {
    int c = pivot > array[j];
    int y = array[i];
    int z = array[j];
    array[i] = c ? z : y; // Done using CMOVgl
    array[j] = c ? y : z; // Done using CMOVgl
    i += c;
  }
  swap(&array[i], &array[high]);
  return (i);
}

int max_depth = 0;

void sort_quick_optimized_swap_cmov_h(int array[], int64_t low, int64_t high, int d) {
  max_depth = max(max_depth, d);
  if (low < high) {
    if (high - low > INSERTION_SORT_THRESH) {
      if (array[low] == array[high] && array[low] == array[(low + high) / 2]) {
        int not_equal = 0;
        for (int i = low + 1; i < high; i++) {
          not_equal += array[i] != array[low];
          if (not_equal > (high - low) / 5) {
            break;
          }
        }
        if (not_equal != 0) {
          if (not_equal < (high - low) / 5) {
            insertionSortStd(array, low, high);
          } else {
            int64_t pi = partition_quick_optimized_swap_cmov(array, low, high);
            sort_quick_optimized_swap_cmov_h(array, low, pi - 1, d + 1);
            sort_quick_optimized_swap_cmov_h(array, pi + 1, high, d + 1);
          }
        }
      } else {
        int64_t pi = partition_quick_optimized_swap_cmov(array, low, high);
        sort_quick_optimized_swap_cmov_h(array, low, pi - 1, d + 1);
        sort_quick_optimized_swap_cmov_h(array, pi + 1, high, d + 1);
      }
    } else {
      insertionSortOptimized(array + low, high - low + 1);
    }
  }
}

void sort_quick_optimized_swap_cmov(int array[], int64_t low, int64_t high) {
  sort_quick_optimized_swap_cmov_h(array, low, high, 0);
}