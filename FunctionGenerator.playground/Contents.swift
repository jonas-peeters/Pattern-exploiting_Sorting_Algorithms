func swap(_ index: Int, _ target: Int) {
    if index != 0 {
        print("array[j + \(index)] = array[*i];")
    } else {
        print("array[j] = array[*i];")
    }
    print("array[*i] = _mm256_extract_epi32(swapValues, \(index));")
    print("(*i)++;")
}

for i in 0..<256 {
    print("void swapper\(i)(int array[], int *i, int j, __m256i swapValues) {")
    print("int *swapIndex;")
    var count = 0;
    for j in [0b10000000, 0b01000000, 0b00100000, 0b00010000, 0b00001000, 0b00000100, 0b00000010, 0b00000001] {
        if j == 0b10000000 && i & j != 0 {
            swap(0, count)
            count += 1
        } else if j == 0b01000000 && i & j != 0 {
            swap(1, count)
            count += 1
        } else if j == 0b00100000 && i & j != 0 {
            swap(2, count)
            count += 1
        } else if j == 0b00010000 && i & j != 0 {
            swap(3, count)
            count += 1
        } else if j == 0b00001000 && i & j != 0 {
            swap(4, count)
            count += 1
        } else if j == 0b00000100 && i & j != 0 {
            swap(5, count)
            count += 1
        } else if j == 0b00000010 && i & j != 0 {
            swap(6, count)
            count += 1
        } else if j == 0b00000001 && i & j != 0 {
            swap(7, count)
            count += 1
        }
        
        
    }
    print("}")
    
}

print("void (*swappers[256])(int[], int *, int, __m256i) = {")
for i in 0..<256 {
    print("&swapper\(i)\(i == 255 ? "" : ", ")")
}

print("};")
